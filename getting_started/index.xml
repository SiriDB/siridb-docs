<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting started on SiriDB documentation</title><link>https://docs.siridb.net/getting_started/</link><description>Recent content in Getting started on SiriDB documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://docs.siridb.net/getting_started/index.xml" rel="self" type="application/rss+xml"/><item><title>Build from source</title><link>https://docs.siridb.net/getting_started/build_from_source/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.siridb.net/getting_started/build_from_source/</guid><description>As of version 2.0.19, libcleri is no longer included as part of this source anymore and must be installed separately. Libcleri can be found here: https://github.com/cesbit/libcleri or can be installed using apt.
Linux Install the following requirements (Ubuntu 20.04):
sudo apt install libcleri-dev sudo apt install libpcre2-dev sudo apt install libuv1-dev sudo apt install libyajl-dev sudo apt install uuid-dev Compile the source code:
cd ./Release make clean make test make Note: Replace .</description></item><item><title>Docker</title><link>https://docs.siridb.net/getting_started/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.siridb.net/getting_started/docker/</guid><description>Images Docker images of the siridb-server are available on GitHub.
Supported tags:
ghcr.io/siridb/siridb-server:VERSION (Minimal SiriDB image based on Alpine Linux.)
ghcr.io/siridb/siridb-server:latest (Latest SiriDB build from the master branch using a minimal Alpine Linux base image)
Getting started The basic steps required to run the SiriDB server in Docker are explained below.
Pulling To get started, run the following command in your terminal:
$ docker pull ghcr.io/siridb/siridb-server:latest Note: Depending on how you&amp;rsquo;ve installed docker on your system, you might see a permission denied error after running the above command.</description></item><item><title>Configuration</title><link>https://docs.siridb.net/getting_started/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.siridb.net/getting_started/configuration/</guid><description>SiriDB can start with environment variables and/or with a configuration file. By default SiriDB will search for the configuration file in /etc/siridb/siridb.conf but alternatively you can specify a custom path by using the -c/--config argument.
$ siridb-server -c /my/path/siridb.conf An example configuration file can be found here: https://github.com/SiriDB/siridb-server/blob/master/siridb.conf
However be aware that the environment variables will overwrite the configuration file settings if both apply to the same setting.
Environmental variables:</description></item><item><title>Start up server</title><link>https://docs.siridb.net/getting_started/start_up_server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.siridb.net/getting_started/start_up_server/</guid><description>Now that SiriDB is installed and configured, you can start a SiriDB server:
$ siridb-server If you use a configuration file instead of the environment variables and this file is stored at a different location than the default /etc/siridb/siridb.conf; you have to specify the path using the -c/--config argument:
$ siridb-server -c /my/path/siridb.conf Flag information Flag Description -h, --help Show the help message and exit.</description></item><item><title>Example database</title><link>https://docs.siridb.net/getting_started/example_database/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.siridb.net/getting_started/example_database/</guid><description>Before we start&amp;hellip; Once at least one SiriDB server is running, you are ready to create your first SiriDB database.
Creating and managing SiriDB is done with a Service account. (Default sa with password siri)
SiriDB can listen to both a socket connection (SIRIDB_LISTEN_CLIENT_PORT) and, if enabled, to HTTP API (SIRIDB_HTTP_API_PORT) requests. For managing SiriDB with a socket connection, a SiriDB Admin tool is created but in this example we assume that SIRIDB_HTTP_API_PORT is configured to port 9020.</description></item></channel></rss>