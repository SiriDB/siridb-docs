[{"uri":"https://docs.siridb.net/getting_started/","title":"Getting started","tags":[],"description":"","content":"Getting started In this section we are going to explain how to install and configure SiriDB.\n"},{"uri":"https://docs.siridb.net/getting_started/ubuntu/","title":"Ubuntu","tags":[],"description":"","content":"For Ubuntu we have a deb package available which can be downloaded here.\nNote: SiriDB requires libexpat1, libuv1, libpcre2-8-0 and libcleri0 these libraries can be easily installed using apt:\napt install libexpat1 libuv1 libpcre2-8-0 libcleri0  Library libcleri0 is available from Ubuntu 18.04, for older versions a deb package can be found here: https://github.com/transceptor-technology/libcleri/releases/latest\n The .deb package installs a configuration file at /etc/siridb/siridb.conf. You might want to view or change this file before starting SiriDB. See the section about Configuration.\n"},{"uri":"https://docs.siridb.net/getting_started/build_from_source/","title":"Build from source","tags":[],"description":"","content":" From version 2.0.19 libcleri is not included as part of this source anymore and needs to be installed separately. libcleri can be found here: https://github.com/transceptor-technology/libcleri or can be installed using apt.\n Linux Install the following requirements: (Ubuntu 18.04)\nsudo apt install libcleri-dev sudo apt install libpcre2-dev sudo apt install libuv1-dev sudo apt install libyajl-dev sudo apt install uuid-dev Compile (replace Release with Debug for a debug build):\ncd ./Release make clean make test make Install\nsudo make install OSX  Make sure libcleri is installed!\n Install the following requirements:\nbrew install pcre2 brew install libuv brew install yajl brew install ossp-uuid Compile (replace Release with Debug for a debug build):\ncd ./Release export CFLAGS=\u0026#34;-I/usr/local/include\u0026#34; export LDFLAGS=\u0026#34;-L/usr/local/lib\u0026#34; make clean make test make Install\nsudo make install "},{"uri":"https://docs.siridb.net/getting_started/configuration/","title":"Configuration","tags":[],"description":"","content":"SiriDB can start with environment variables and/or with a configuration file. By default SiriDB will search for the configuration file in /etc/siridb/siridb.conf but alternatively you can specify a custom path by using the -c/--config argument.\n$ siridb-server -c /my/path/siridb.conf An example configuration file can be found here: https://github.com/SiriDB/siridb-server/blob/master/siridb.conf\nHowever be aware that the environment variables will overwrite the configuration file settings if both apply to the same setting.\nEnvironmental variables:\n   Variable Default Description     SIRIDB_SERVER_NAME  %HOSTNAME:9010 SiriDB will use this address:port for it\u0026rsquo;s back-end connections. This must be an address that other servers can use to connect to. For example IPv4, IPv6 or a fqdn are all possible. When using IPv6 be sure to wrap the ip address with square brackets. For example [::1]:9010. The default value is %HOSTNAME:9010. The variable %HOSTNAME will be translate to the systems host name.   SIRIDB_BIND_SERVER_ADDRESS 127.0.0.1 Listen for SiriDB-server connections only on localhost. Use value 0.0.0.0 (or :: for IPv6) to bind to all interfaces.   SIRIDB_LISTEN_CLIENT_PORT 9000 SiriDB will listen for client connections on this port number.   SIRIDB_BIND_CLIENT_ADDRESS 127.0.0.1 Listen for client connections only on localhost. Use value 0.0.0.0 (or :: for IPv6) to bind to all interfaces.   SIRIDB_IP_SUPPORT ALL When ip_support is set to ALL, SiriDB will listen and connect to both IPv4 and IPv6 addresses. Valid options are ALL, IPV4ONLY and IPV6ONLY.   SIRIDB_DEFAULT_DB_PATH /var/lib/siridb SiriDB will load databases from, and create databases in this location.   SIRIDB_OPTIMIZING_INTERVAL 3600 SiriDB will run an optimize task each X seconds. A value of 0 (zero) disables optimizing.   SIRIDB_HEARTBEAT_INTERVAL 30 SiriDB uses a heart-beat interval to keep connections with other servers online.   SIRIDB_BUFFER_SYNC_INTERVAL 0 SiriDB can run fsync on the buffer file on an interval in milliseconds. This value is set to 0 by default which tells SiriDB to run fsync after each insert request. When having many insert requests per second, it can be useful to use an interval like 500 milliseconds.   SIRIDB_MAX_OPEN_FILES 32768 SiriDB will not open more shard files than max_open_files. Note that the total number of open files can be sligtly higher since SiriDB also needs a few other files to write to.   SIRIDB_ENABLE_SHARD_COMPRESSION 0 Use shard compression for storing data points. Set value 1 (recommended) to enable shard compression or 0 to disable compression.   SIRIDB_ENABLE_SHARD_AUTO_DURATION 0 Let SiriDB control shard duration when possible. When enabled (1), the database configured shard duration for both number and log values will still be used when SiriDB is not able to detect a sensible duration.   SIRIDB_ENABLE_PIPE_SUPPORT 0 Enable named pipe support for client connections.   SIRIDB_PIPE_CLIENT_NAME siridb_client.sock SiriDB will bind the client named pipe in this location.   SIRIDB_HTTP_STATUS_PORT 0 When the HTTP status port is not set (or 0), the service will not start. Otherwise the HTTP requests /status, /ready and /healthy are available which can be used for readiness and liveness requests. Example usage using wget: wget -q -O - http://siridb-server.local:8080/status   SIRIDB_HTTP_API_PORT 0 When the HTTP API port is not set (or 0), the API service will not start. Otherwise the HTTP POST requests can be user to insert or query data points.   SIRIDB_IGNORE_BROKEN_DATA 0 SiriDB will ignore corrupted or broken shards and related database files even at the cost of losing some or all data. This option is useful especially for transient data on systems prone to power outage or frequent hard resets.    "},{"uri":"https://docs.siridb.net/getting_started/start_up_server/","title":"Start up server","tags":[],"description":"","content":"Now that SiriDB is installed and configured, you can start a SiriDB server:\n$ siridb-server If you use a configuration file instead of the environment variables and this file is stored at a different location than the default /etc/siridb/siridb.conf; you have to specify the path using the -c/--config argument:\n$ siridb-server -c /my/path/siridb.conf Flag information    Flag Description     -h, --help Show the help message and exit.   -c, --config CONFIG Define which SiriDB configuration file to use.   -v, --version Show version information and exit.   -l, --log-level Set initial log level: debug, info, warning, error, critical.   --log-colorized Use colorized logging.    "},{"uri":"https://docs.siridb.net/overview/","title":"Overview","tags":[],"description":"","content":"Overview In this section we briefly explain some concepts of SiriDB.\n"},{"uri":"https://docs.siridb.net/overview/service_account/","title":"Service account","tags":[],"description":"","content":"Service accounts are used for managing databases. A service account is a user on a SiriDB server, which should not be confused with a database user. A service account has no access to a SiriDB database. The reason for separating these accounts is that a database can extend over multiple servers, while a service account only gives access to a single server.\nYou can manage the service account(s) and database(s) via the SiriDB Admin tool or using the HTTP API.\nEvery SiriDB server has already one default service account installed: sa user with password siri.\n"},{"uri":"https://docs.siridb.net/overview/database_user/","title":"Database user","tags":[],"description":"","content":"Database users have access to a SiriDB database and can insert and query data.\nYou can connect and work with a database via the SiriDB http tool, SiriDB prompt or using one of the options mentioned in the section Connect.\nEvery new SiriDB database has already one default user account installed: iris user with password siri.\n"},{"uri":"https://docs.siridb.net/overview/series/","title":"Series","tags":[],"description":"","content":"Series or time series can be seen as lists of data points. Time series in SiriDB are uniquely identified by name and can have any number of points. A single point consists of a timestamp and value. SiriDB allows you to insert points in any order. That way it is possible to backfill the database with old data while new values are coming in as well.\nSiriDB supports time series for numeric data types (integer or float) and strings. You do not need to specify the type in advance. When inserting data into SiriDB, new time series will be created automatically for the correct data type. Time series can be queried by name, regular expressions or dynamic groups.\n"},{"uri":"https://docs.siridb.net/overview/server_pool_replica/","title":"Server, Pool &amp; Replica","tags":[],"description":"","content":"SiriDB can distribute time series across multiple pools and for redundancy each pool can have two servers. If one server in a pool fails; the other server, which is a replica, will still be able to handle all requests so the database can still be used. This is also helpful in case you want to install a new version of SiriDB. By upgrading one server in each pool at a time, upgrading can be done without any downtime.\nInstead of a global index for the time series, SiriDB uses a custom crafted algorithm to map time series to a pool. This algorithm is designed in such a way that, when adding a new pool, data is only moved from existing pools to the new pool and not between existing pools. During the process of extending a database with a new pool, a copy of the old lookup is kept to make sure queries and inserts keep working. SiriDB intentionally runs the expansion with low priority in the background so the database remains fully operational when a new pool is being added. The same is true for adding a second server to a pool. SiriDB will replicate all data to the new server in the background and the new server becomes a full cluster member as soon as the initial replication is finished.\nWhen new data is received by SiriDB, it first determines in which pool the data should be stored, after which the data is sent to the specific pool. In case a pool has two servers, one is randomly chosen and this server will be responsible for updating the replica by using a fifo buffer on disk.\n"},{"uri":"https://docs.siridb.net/overview/buffer/","title":"Buffer","tags":[],"description":"","content":"When a server receives data it stores this in a buffer. The buffer is immediately saved on disk and is also kept in memory. The buffer can store a fixed number of points for each time series. This number depends on the buffer size which can be configured when creating a database. Since SiriDB does not read from the buffer-file, it does not matter in which order the points are saved. In memory the points are saved in order so queries can return the points from the buffer very fast.\nWhen the buffer for a time series is “full” and new points can\u0026rsquo;t be saved, then both the new, and the buffer data will be sent to shards.\n"},{"uri":"https://docs.siridb.net/overview/shards/","title":"Shards","tags":[],"description":"","content":"Shards are files for specific time-ranges. On the initial setup of a SiriDB database the shard duration must be chosen.\nA single shard has chunks of ordered points, each with an index. This index consists of a time series identifier, a start time, end time and the number of points in the chunk. All points in a chunk belong to the time-range of the specific shard; so chunks between shards can never overlap in time. Within one shard, time series can have multiple chunks which may overlap in time. If this is the case then both the time series and the shard are marked to have an overlap. When selecting data, SiriDB usually just takes the chunks in the right order but when an overlap is detected, SiriDB will also sort the points where required.\nSince sorting in general is a slow process which might slow down SiriDB queries, we ideally do not want overlaps. We also do not want a lot of chunks with only a few points since each chunk requires memory and a little disk space. To solve this SiriDB has a thread running for optimizing shards. This task periodically checks for shards which can be optimized. It then takes all chunks for a time series within this shard and re-writes the chunks so that no overlap exists and each chunk has an optimal amount of points.\nWhen SiriDB is started, it needs to rebuild an index for all chunks inside the shards. The indexes are therefore stored in separate files to speed up the process. For efficiency reasons SiriDB uses an optimization task to do this. Only while optimizing, the index and points are written in separate files. This process stops when new data is written to the shard, no matter if the optimization task is still running or not.\nOnce optimization is finished, SiriDB can use the index file at startup.\n"},{"uri":"https://docs.siridb.net/connect/","title":"Connect","tags":[],"description":"","content":"Connect There are several options to communicate with SiriDB. By default each server listens to port 9000 for client connections.\nSiriDB currently has connectors available for Python, Go, R, C/C++, PHP, Java and Node.js.\nAs an alternative to the connectors, SiriDB has support for HTTP requests through an HTTP API.\n"},{"uri":"https://docs.siridb.net/connect/http_api/","title":"HTTP","tags":[],"description":"","content":"Before using the HTTP API, make sure at least one node has the HTTP API port enabled. By default the API port is disabled, this can be changed by setting http_api_port in the configuration file or by setting the SIRIDB_HTTP_API_PORT environment variable.\nThe API has support for both JSON and qpack and can be used to perform service requests, inserts and queries.\nHeaders The header field Content-Type is required and needs application/json or application/qpack.\nAuthentication The HTTP API has supports for basic authentication.\nIn the examples below we use the default service account sa:siri (c2E6c2lyaQ== when base64 encoded) and the default database user iris:siri (aXJpczpzaXJp when base64 encoded)\nURIs The following URIs are available.\nService requests:\n /new-database /new-account /change-password /drop-account /new-pool /new-replica /drop-database /get-version /get-accounts /get-databases  Query request:\n /query/DBNAME  Insert request:\n /insert/DBNAME  Examples Service request Creating a new database using curl with basic authentication:\nnew-database curl --location --request POST \u0026#39;http://siridb-server-1:9020/new-database\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic c2E6c2lyaQ==\u0026#39; \\ --header \u0026#39;Content-Type: text/plain\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;dbname\u0026#34;: \u0026#34;sampledb\u0026#34;, \u0026#34;time_precision\u0026#34;: \u0026#34;s\u0026#34;, \u0026#34;buffer_size\u0026#34;: 8192, \u0026#34;duration_num\u0026#34;: \u0026#34;1w\u0026#34;, \u0026#34;duration_log\u0026#34;: \u0026#34;3d\u0026#34; }\u0026#39;  Possible response\n \u0026#34;OK\u0026#34; new-account curl --location --request POST \u0026#39;http://siridb-server-1:9020/new-account\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic c2E6c2lyaQ==\u0026#39; \\ --header \u0026#39;Content-Type: text/plain\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;account\u0026#34;: \u0026#34;bob\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;passwd4bob\u0026#34; }\u0026#39;  Possible response\n \u0026#34;OK\u0026#34; change-password curl --location --request POST \u0026#39;http://siridb-server-1:9020/change-password\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic c2E6c2lyaQ==\u0026#39; \\ --header \u0026#39;Content-Type: text/plain\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;account\u0026#34;: \u0026#34;bob\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;pass\u0026#34; }\u0026#39;  Possible response\n \u0026#34;OK\u0026#34; drop-account curl --location --request POST \u0026#39;http://siridb-server-1:9020/drop-account\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic c2E6c2lyaQ==\u0026#39; \\ --header \u0026#39;Content-Type: text/plain\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;account\u0026#34;: \u0026#34;bob\u0026#34; }\u0026#39;  Possible response\n \u0026#34;OK\u0026#34; new-pool curl --location --request POST \u0026#39;http://siridb-server-3:9020/new-pool\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic c2E6c2lyaQ==\u0026#39; \\ --header \u0026#39;Content-Type: text/plain\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;dbname\u0026#34;: \u0026#34;sampledb\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;iris\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;siri\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;siridb-server-1\u0026#34;, \u0026#34;port\u0026#34;: 9000 }\u0026#39;  Possible response\n \u0026#34;OK\u0026#34; new-replica curl --location --request POST \u0026#39;http://siridb-server-2:9020/new-replica\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic c2E6c2lyaQ==\u0026#39; \\ --header \u0026#39;Content-Type: text/plain\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;dbname\u0026#34;: \u0026#34;sampledb\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;iris\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;siri\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;siridb-server-1\u0026#34;, \u0026#34;port\u0026#34;: 9000, \u0026#34;pool\u0026#34;: 0 }\u0026#39;  Possible response\n \u0026#34;OK\u0026#34; drop-database curl --location --request POST \u0026#39;http://siridb-server-1:9020/drop-database\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic c2E6c2lyaQ==\u0026#39; \\ --header \u0026#39;Content-Type: text/plain\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;database\u0026#34;: \u0026#34;sampledb\u0026#34;, \u0026#34;ignore_offline\u0026#34;: false }\u0026#39;  Possible response\n \u0026#34;OK\u0026#34; get-version curl --location --request GET \u0026#39;http://siridb-server-1:9020/get-version\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic c2E6c2lyaQ==\u0026#39;  Possible response\n [\u0026#34;2.0.36\u0026#34;] get-accounts curl --location --request GET \u0026#39;http://siridb-server-1:9020/get-accounts\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic c2E6c2lyaQ==\u0026#39;  Possible response\n [\u0026#34;sa\u0026#34;,\u0026#34;bob\u0026#34;] get-databases curl --location --request GET \u0026#39;http://siridb-server-1:9020/get-databases\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic c2E6c2lyaQ==\u0026#39;  Possible response\n [\u0026#34;sampledb\u0026#34;] Query request Selecting the number of points in a certain series called \u0026lsquo;aggr\u0026rsquo;.\ncurl --location --request POST \u0026#39;http://siridb-server-1:9020/query/dbtest\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic aXJpczpzaXJp\u0026#39; \\ --header \u0026#39;Content-Type: text/plain\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;q\u0026#34;: \u0026#34;select count() from \u0026#39;\\\u0026#39;\u0026#39;aggr\u0026#39;\\\u0026#39;\u0026#39;\u0026#34;, \u0026#34;t\u0026#34;: \u0026#34;ms\u0026#34; }\u0026#39;  Possible response\n {\u0026#34;aggr\u0026#34;:[ [1588450390000,23] ] } An optional {\u0026quot;t\u0026quot;: \u0026quot;\u0026lt;TIME_PRECISION\u0026gt;\u0026quot;} may be used, where \u0026lt;TIME_PRECISION\u0026gt; can be s, ms, us or ns. (seconds, milliseconds, microseconds or nanoseconds). If it is not provided then the timestamp precision is set to the database default.\nInsert request Inserting two points in a series.\ncurl --location --request POST \u0026#39;http://siridb-server-1:9020/insert/dbtest\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic aXJpczpzaXJp\u0026#39; \\ --header \u0026#39;Content-Type: text/plain\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;my-example-serie\u0026#34;: [ [1578933215, 42], [1578933223, 123] ] }\u0026#39;  Possible response\n {\u0026#34;success_msg\u0026#34;:\u0026#34;Successfully inserted 2 point(s).\u0026#34;} "},{"uri":"https://docs.siridb.net/connect/grafana/","title":"Grafana SiriDB HTTP datasource","tags":[],"description":"","content":"A SiriDB data source plugin for Grafana.\nInstallation Go to the Grafana plugins folder. (usually this is /var/lib/grafana/plugins/)\ncd /var/lib/grafana/plugins/ Clone the git project into the plugins folder:\ngit clone https://github.com/SiriDB/grafana-siridb-http-datasource.git Restart Grafana\nsudo systemctl restart grafana-server.service Quick usage See the following blog article on how to configure and use this plugin: https://github.com/SiriDB/grafana-siridb-http-example.\nMore info A more complete description of the SiriDB data source plugin for Grafana can be found via the link below.\n https://github.com/SiriDB/grafana-siridb-http-datasource#readme   Note:\nSince SiriDB version 2.0.36 and Grafana-Sirdb-HTTP-datasource version \u0026hellip; you can use the build-in HTTP API instead of the SiriDB http connector. In this case you only need to provide URL: https://localhost:9020/query/dbname when you add a data source in Grafana. If you still wish to use the SiriDB HTTP connector you have to configure and start the SiriDB HTTP service and you need to enter the URL:https://localhost:5050/query when adding the data source to Grafana.\n "},{"uri":"https://docs.siridb.net/connect/python/","title":"Python","tags":[],"description":"","content":"The SiriDB Connector is a self-contained Python driver for communicating with SiriDB servers.\nInstallation From PyPI (recommended)\npip install siridb-connector From source code\npython setup.py install Quick usage import asyncio import time import random from siridb.connector import SiriDBClient async def example(siri): # Start connecting to SiriDB. # .connect() returns a list of all connections referring to the supplied # hostlist. The list can contain exceptions in case a connection could not # be made. await siri.connect() try: # insert ts = int(time.time()) value = random.random() await siri.insert({\u0026#39;some_measurement\u0026#39;: [[ts, value]]}) # query resp = await siri.query(\u0026#39;select * from \u0026#34;some_measurement\u0026#34;\u0026#39;) print(resp) finally: # Close all SiriDB connections. siri.close() siri = SiriDBClient( username=\u0026#39;iris\u0026#39;, password=\u0026#39;siri\u0026#39;, dbname=\u0026#39;dbtest\u0026#39;, hostlist=[(\u0026#39;localhost\u0026#39;, 9000)], # Multiple connections are supported keepalive=True) loop = asyncio.get_event_loop() loop.run_until_complete(example(siri)) More info A more complete description of the python-connector can be found via the link below.\n https://github.com/SiriDB/siridb-connector#readme  "},{"uri":"https://docs.siridb.net/connect/go/","title":"Golang","tags":[],"description":"","content":"A SiriDB-Connector for the Go language\nInstallation Install the package to your $GOPATH with the go tool from shell:\n$ go get github.com/SiriDB/go-siridb-connector Make sure Git is installed on your machine and in your system\u0026rsquo;s PATH.\nQuick usage Go SiriDB Connector can be used to communicate with a single SiriDB server and a more advanced client is provided which can connect to multiple SiriDB servers so queries and inserts are balanced.\nSingle connection This is some example code for how to use the Go-SiriDB-Connector as a single connection.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/SiriDB/go-siridb-connector\u0026#34; ) func example(conn *siridb.Connection, ok chan bool) { // make sure the connection will be closed \tdefer conn.Close() // create a new database with the following configuration \toptions := make(map[string]interface{}) options[\u0026#34;dbname\u0026#34;] = \u0026#34;dbtest\u0026#34; options[\u0026#34;time_precision\u0026#34;] = \u0026#34;s\u0026#34; options[\u0026#34;buffer_size\u0026#34;] = 1024 options[\u0026#34;duration_num\u0026#34;] = \u0026#34;1w\u0026#34; options[\u0026#34;duration_log\u0026#34;] = \u0026#34;1d\u0026#34; // using the default service account \u0026#39;sa\u0026#39; and password \u0026#39;siri\u0026#39; \tif res, err := conn.Manage(\u0026#34;sa\u0026#34;, \u0026#34;siri\u0026#34;, siridb.AdminNewDatabase, options); err == nil { fmt.Printf(\u0026#34;Manage result: %v\\n\u0026#34;, res) } // connect to database \u0026#39;dbtest\u0026#39; using user \u0026#39;iris\u0026#39; and password \u0026#39;siri\u0026#39; \t// this is an example but usually you should do some error handling... \tif err := conn.Connect(\u0026#34;iris\u0026#34;, \u0026#34;siri\u0026#34;, \u0026#34;dbtest\u0026#34;); err == nil { seriename := \u0026#34;serie-001\u0026#34; timestamp := 1471254705 value := 1.5 serie := make(map[string][][]interface{}) serie[seriename] = [][]interface{}{{timestamp, value}} // insert data \tif res, err := conn.Insert(serie, 10); err == nil { fmt.Printf(\u0026#34;Insert result: %s\\n\u0026#34;, res) } // perform a query \tif res, err := conn.Query(\u0026#34;select * from *\u0026#34;, 10); err == nil { fmt.Printf(\u0026#34;Query result: %v\\n\u0026#34;, res) } } // send to the channel \tok \u0026lt;- true } func main() { // create a new connection \tconn := siridb.NewConnection(\u0026#34;localhost\u0026#34;, 9000) // a connection will send output to stdout except when a log channel is used. \t// setup a log channel using: \t// conn.LogCh = myLogChannel  // create a channel \tok := make(chan bool) // run the example \tgo example(conn, ok) // wait for the channel \t\u0026lt;-ok } SiriDB client And one example for using the client. A client can be used for connecting to multiple SiriDB servers. Queries and inserts will be send to a random SiriDB server. When a connection is lost, it will retry to setup the connection each 30 seconds.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/SiriDB/go-siridb-connector\u0026#34; ) func example(client *siridb.Client, ok chan bool) { // make sure the connection will be closed \tdefer client.Close() client.Connect() // IsConnected() returns true if at least one server is connected. \t// Failed connections will retry creating a connection each 30 seconds. \tif client.IsConnected() { if res, err := client.Query(\u0026#34;list series\u0026#34;, 2); err == nil { fmt.Printf(\u0026#34;Query result: %s\\n\u0026#34;, res) } } else { fmt.Println(\u0026#34;not even a single server is connected...\u0026#34;) } // send to the channel \tok \u0026lt;- true } func main() { // create a new client \tclient := siridb.NewClient( \u0026#34;iris\u0026#34;, // username \t\u0026#34;siri\u0026#34;, // password \t\u0026#34;dbtest\u0026#34;, // database \t[][]interface{}{ {\u0026#34;server1\u0026#34;, 9000}, {\u0026#34;server2\u0026#34;, 9000}, }, // siridb server(s) \tnil, // optional log channel \t) // create a channel \tok := make(chan bool) // run the example \tgo example(client, ok) // wait for the channel \t\u0026lt;-ok } More info A more complete description of the go-connector can be found via the link below.\n https://github.com/SiriDB/go-siridb-connector#readme  "},{"uri":"https://docs.siridb.net/connect/libsuv/","title":"Libsuv (C/C++)","tags":[],"description":"","content":"SiriDB Connector using libuv and libsiridb.\nInstallation Install debug or release version, in this example we will install the release version.\n$ cd Release Compile libsuv\n$ make all Install libsuv\n$ sudo make install  Note: run sudo make uninstall for removal.\n Quick usage Example to connect and authenticate to SiriDB:\n#include \u0026lt;suv.h\u0026gt; uv_loop_t loop; void connect_cb(siridb_req_t * req) { suv_connect_t * connect = (suv_connect_t *) req-\u0026gt;data; if (req-\u0026gt;status) { printf(\u0026#34;connect or auth failed: %s\\n\u0026#34;, siridb_strerror(req-\u0026gt;status)); } else if (req-\u0026gt;pkg-\u0026gt;tp != CprotoResAuthSuccess) { printf(\u0026#34;authentication failed (error %u)\\n\u0026#34;, req-\u0026gt;pkg-\u0026gt;tp); } else { // do something with the connection  } /* cleanup connetion handle */ suv_connect_destroy(connect); /* lets stop the example */ suv_close(suv_buf_from_req(req), NULL); /* cleanup connection request */ siridb_req_destroy(req); } int main(void) { struct sockaddr_in addr; /* initialize uv loop */ uv_loop_init(\u0026amp;loop); /* asume siridb-server is running on localhost and port 9000 */ uv_ip4_addr(\u0026#34;127.0.0.1\u0026#34;, 9000, \u0026amp;addr); /* create a siridb client */ siridb_t * siridb = siridb_create(); /* create a buffer for the connection */ suv_buf_t * buf = suv_buf_create(siridb); /* create a connection request */ siridb_req_t * req = siridb_req_create(siridb, connect_cb, NULL); /* create a connection handle */ suv_connect_t * connect = suv_connect_create(req, \u0026#34;iris\u0026#34;, \u0026#34;siri\u0026#34;, \u0026#34;dbtest\u0026#34;); /* explicit bind the connect handle to the request. (this must be done!) */ req-\u0026gt;data = (void *) connect; /* Warning: This overwrites tcp-\u0026gt;data and siridb-\u0026gt;data so do not use these * members yourself. */ suv_connect(\u0026amp;loop, connect, buf, (struct sockaddr *) \u0026amp;addr); /* run the uv event loop */ uv_run(\u0026amp;loop, UV_RUN_DEFAULT); /* close the loop */ uv_loop_close(\u0026amp;loop); /* cleanup buffer */ suv_buf_destroy(buf); /* cleanup siridb */ siridb_destroy(siridb); return 0; } More info A more complete description of libsuv can be found via the link below.\n https://github.com/SiriDB/libsuv#readme  "},{"uri":"https://docs.siridb.net/connect/libsuv/libsiridb/","title":"Libsiridb (library)","tags":[],"description":"","content":"Libsiridb is a library which can be used to communicate with SiriDB using the C program language. This library contains useful functions but does not handle the connection itself.\nInstallation  Note: libsiridb requires libqpack\n Install debug or release version, in this example we will install the release version.\n$ cd Release Compile libsiridb\n$ make all Install libsiridb\n$ sudo make install  Note: run sudo make uninstall for removal.\n Quick usage For an example you can look at libsuv which contains a full example of how to use this library on top of libuv.\nMore info A more complete description of libsiridb can be found via the link below.\n https://github.com/SiriDB/libsiridb#readme  "},{"uri":"https://docs.siridb.net/connect/nodejs/","title":"Node.js","tags":[],"description":"","content":"Node.js add-on (C++) for SiriDB.\nInstallation node-gyp configure \u0026amp;\u0026amp; node-gyp build Quick usage const sdbaddon = require(\u0026#39;./build/Release/siridb\u0026#39;); var siridb = new sdbaddon.SiriDBClient( \u0026#34;iris\u0026#34;, // database user  \u0026#34;siri\u0026#34;, // password  \u0026#34;dbtest\u0026#34;, // database name  \u0026#34;localhost\u0026#34;, // server address  9000 // server port ); siridb.connect(err =\u0026gt; { // success: err is null  // error: err is a string with an error message  if (err) { console.error(`Connection error: ${err}`); } else { siridb.close(); } }); More info A more complete description of the node.js add-on can be found via the link below.\n https://github.com/SiriDB/siridb-nodejs-addon#readme  "},{"uri":"https://docs.siridb.net/connect/java/","title":"Java","tags":[],"description":"","content":"The SiriDB Connector for Java is a self-contained Java driver for communicating with SiriDB servers.\nInstallation First you need to install the Java-QPack library. Add this library to your project.\nNow you can install the connector. You can get a copy of the compiled jar file here or clone the repository and compile the code. Add the jar file as library to your project.\nQuick usage The SiriDB Connector can be used to communicate with a single SiriDB server and a more advanced client is provided which can connect to multiple SiriDB servers so queries and inserts are balanced.\nAn example of how to create a Client can be found below.\nhostlist = new String[][]{ {\u0026#34;localhost\u0026#34;, \u0026#34;9000\u0026#34;, \u0026#34;-1\u0026#34;}, {\u0026#34;localhost\u0026#34;, \u0026#34;9001\u0026#34;, \u0026#34;5\u0026#34;}, {\u0026#34;localhost\u0026#34;, \u0026#34;9002\u0026#34;, \u0026#34;1\u0026#34;}, {\u0026#34;localhost\u0026#34;, \u0026#34;9003\u0026#34;, \u0026#34;2\u0026#34;} }; client = new Client(\u0026#34;iris\u0026#34;, \u0026#34;siri\u0026#34;, \u0026#34;test\u0026#34;, hostlist, true); More info A more complete description of the java-connector can be found via the link below.\n https://github.com/SiriDB/java-siridb-connector#readme  "},{"uri":"https://docs.siridb.net/connect/php/","title":"PHP","tags":[],"description":"","content":"An C extension for PHP. Gives access to commands in PHP code to connect to SiriDB Server and query/insert.\nInstallation MacOS and Linux Make sure you have libsiridb and libqpack insatalled on your system and phpize available as command.\nRun:\nphpize ./configure make sudo make install Don\u0026rsquo;t forget to enable the extension via the php.ini file\nQuick usage When installed, you are able to using the following in your php code. To connect to a SiriDB server use:\n $siridb_con = siridb_connect('127.0.0.1', 9000, 'iris', 'siri', 'testdata_1'); if (!$siridb_con) { print(\u0026quot;Cannot connect with siridb\u0026quot;); } When you want to query something use:\n$result = siridb_query($siridb_con, \u0026quot;select * from 'serie_name'\u0026quot;); echo $result; //json When you want to insert points use:\n$result = siridb_insert($siridb_con, array( \u0026quot;test_serie\u0026quot; =\u0026gt; array( array(1582189879, 1.00003), array(1582189880, 1.00004) ), \u0026quot;test_serie2\u0026quot; =\u0026gt; array( array(1582189879, 1.00003), array(1582189880, 1.00004) ) )); When you want to close the connection, use:\nsiridb_close($siridb_con); More info A more complete description of the PHP-connector can be found via the link below.\n https://github.com/SiriDB/php-siridblib#readme  "},{"uri":"https://docs.siridb.net/connect/r/","title":"R","tags":[],"description":"","content":"R-connector for communicating with a SiriDB Database\nInstallation install.packages('siridbr') Quick usage library(siridbr) siridb \u0026lt;- SiriDB( user=\u0026quot;iris\u0026quot;, # database user password=\u0026quot;siri\u0026quot;, # password dbname=\u0026quot;dbtest\u0026quot;, # database name server=\u0026quot;localhost\u0026quot;, # server address port=9000L # server port ) siridb$connect(function(err) { # success: err is NULL # error: err is a string with an error message if (!is.null(err)) { cat('Connection error: ', err) } else { siridb$close() } }) More info A more complete description of the R-connector can be found via the link below.\n https://github.com/SiriDB/siridb-connector-r#readme  "},{"uri":"https://docs.siridb.net/query_data/","title":"Query data","tags":[],"description":"","content":"Query data When a SiriDB server receives a query it forwards the query to the correct pool(s) if required. In case a pool has two available servers, one is chosen randomly.\nThe server in the pool determines which chunks are required to answer the query and loads them from the shards. Finally, it checks if the buffer contains points which are applicable to the requested time-range and adds them as well. The points will then be sent to the server which received the original request. That server in turn sends the final result to the client.\nSiriDB supports aggregation and filter methods which can save much network traffic to the client. When possible the aggregation and filter methods are performed immediately after reading the time series data in a pool. This way less data needs to be sent back to the server responsible for handling the query. This also spreads the CPU load for the aggregation across multiple pools.\n"},{"uri":"https://docs.siridb.net/query_data/select/","title":"Select","tags":[],"description":"","content":"Selecting data from SiriDB.\nSyntax select \u0026lt;points/functions\u0026gt; from \u0026lt;match_series [\u0026lt;where\u0026gt;]\u0026gt; [\u0026lt;time_range\u0026gt;] [\u0026lt;merge_data\u0026gt;]  Example # Select points from \u0026quot;series-001\u0026quot; select * from \u0026quot;series-001\u0026quot;  "},{"uri":"https://docs.siridb.net/query_data/select/time_range/","title":"time range","tags":[],"description":"","content":"An optional time range can be given to select only a part of the series data. If no time range is provided SiriDB returns all the data available. As a time range we can use before, after or between .. and ..\nWhen using after you basically set a start time, with before an end time and when using between .. and .. you set both a start and end time. Points that have the exact start time are included in the result, points with the exact end time are excluded from the result.\nAllowed formats The allowed formats for time ranges are:\n Integer values: Number of time units after 1970-01-01. The time unit depends on the database time precision. For example, seconds. Time values: w (week), d (day), h (hour), m (minute) and s (second). For example, 2w is equal to two weeks. Date/time strings: For example \u0026quot;2021\u0026quot;, \u0026quot;2021-01-30\u0026quot;, \u0026quot;2021-01-30 12:00\u0026quot;, \u0026quot;2021-01-30 14:31:45Z\u0026quot;, \u0026quot;2021-01-30T14:31:45+0200\u0026quot;. now: A keyword referring to the current date/time.   Note\nIt\u0026rsquo;s safe to use now multiple times in a query. SiriDB only calculates now one time while processing a query. This way you can be sure that now has the same value.\n Examples # Select all points from \u0026quot;series-001\u0026quot; in the last 24h select * from \u0026quot;series-001\u0026quot; after now - 1d # Select all points from \u0026quot;series-001\u0026quot; today select * from \u0026quot;series-001\u0026quot; between now - (now % 1d) and now - (now % 1d) + 1d # Select all points from \u0026quot;series-001\u0026quot; before November, 2015 select * from \u0026quot;series-001\u0026quot; before \u0026quot;2015-11\u0026quot;  "},{"uri":"https://docs.siridb.net/query_data/select/merge_data/","title":"merge data","tags":[],"description":"","content":"When selecting points from multiple series you can merge the data together in one result. Most of the time you also want to provide an aggregate function with the merge so series get really merged into one series. Even with merge it\u0026rsquo;s still possible to use aggregate functions on the series before they are merged.\n Note\nSometimes it does not matter for the end result if you use an aggregate function on the series or only while merging. However, if you have multiple pools it can be an advantage to aggregate the series and the merge. This is an advantage because each pool can do some aggregate work and only send the aggregated result to the server processing the query.\nFor example:\nselect * from /series.*/ merge as \u0026quot;series\u0026quot; using sum(1h)\nwill have the exact same result as\nselect sum(1h) from /series.*/ merge as \u0026quot;series\u0026quot; using sum(1h)\nbut the last one will be faster, assuming you are using a SiriDB cluster and /series.*/ contains multiple series spread out over multiple pools.\n Examples  Note\nIn the examples below we assume there are no points in the future. If you have points in the future and only want points from 7 days ago up till now you can use between now - 7d and now. Since we assume our series have no points in the future we use after now - 7d.\n # We want the average value per 1 hour over the last 7 days over s01 # and s02. The series should weight equal to each other but s01 has # a point each 2 seconds while s02 only has a point each 5 seconds. # We solve this by first getting the mean value for each series # by 1 hour before merging the series. # # Note that we use mean(1) while merging. This means we group by 1 second or # millisecond depending on the time precision. We can do this because the # series are already grouped by 1h and therefore have re-indexed timestamps # at precisely each hour. select mean(1h) from \u0026quot;s01\u0026quot;, \u0026quot;s02\u0026quot; after now - 7d merge as \u0026quot;merged_s\u0026quot; using mean(1) # We want the number of points s01 and s02 have over the last 7 days. # Note: when having no timestamps after now this will result in one # value with timestamp *now* select count(now) from \u0026quot;s01\u0026quot;, \u0026quot;s02\u0026quot; after now - 7d merge as \u0026quot;merged_s\u0026quot; using sum(1) # We have s01 and s02 representing counter data. We want to sum the # values per 4 hours over January, 2015 and show this as one series. select sum(4h) from \u0026quot;s01\u0026quot;, \u0026quot;s01\u0026quot; between \u0026quot;2015-01\u0026quot; and \u0026quot;2015-02\u0026quot; merge as \u0026quot;merged_s\u0026quot; using sum(1)  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/","title":"Aggregate functions","tags":[],"description":"","content":"SiriDB supports multiple build-in aggregation and filter functions. Using these functions can be useful to reduce network traffic.\nList of the supported aggregation and filter functions:\n count derivative difference filter first interval last limit max mean median median_high median_low min pvariance stddev sum timeval variance  Multiple aggregate functions in one query It\u0026rsquo;s possible to select multiple aggregate functions in one query. This has some advantages over performing multiple queries since the database in this case only needs to search for the series and points once. To find the requested aggregate in the result we must add a prefix and/or suffix to the series name to make the name unique.\n Note\nA prefix and/or suffix is only required when querying multiple aggregates.\n Example:\n# Select both the min and max grouped by 5 minutes from \u0026quot;series-001\u0026quot; select min(5m) prefix \u0026quot;min-\u0026quot;, max (5m) prefix \u0026quot;max-\u0026quot; from \u0026quot;series-001\u0026quot;  The aggregate functions can be used together by parsing the result of one function to the next. It\u0026rsquo;s also possible to use the same function twice which can be useful with for example difference.\nExample:\n# Select the median grouped by 1 minute and return the difference for that result select median (1m) =\u0026gt; difference () from \u0026quot;series-001\u0026quot;  Time span argument Most aggregation functions accept an optional ts (time span) argument; which determines the time window over which a set of values is grouped to a single summary value. A time span of 1w for example will create \u0026lsquo;buckets\u0026rsquo; with a length of 1 week that are summarized to one value at the end of the bucket. Be aware that the start is always at 1970-01-01. So if you have a time series between 2020-04-06 and 2020-04-21, a ts of 1w will result in 3 summary values with a timestamp at: 2020-04-09, 2020-04-16 and 2020-04-23. So the first bucket does not end a week from April 6th, as you might expect.\nts can also be a timestamp where you can use now for example. This determines the end of the first bucket. The beginning starts at 1970-01-01. If there are points beyond that timestamp, they will be captured in subsequent buckets.\nWhen the time span is not provided, SiriDB will usually return the summarized value at the last timestamp in the result. One exception is the first() function which will return the first timestamp instead.\nFor example:\n# Select the last time-stamp and the average over all values. select mean() from `my_series` # Select the first time-stamp and first value: select first() from `my_series`  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/count/","title":"count","tags":[],"description":"","content":"Returns the number of points over a time window.\nIf no time window is provided it returns the total number of points in the series.\nFunction count([ts])  Arguments    Arguments Description     ts (optional) Time window. It can also be a timestamp that determines the end of the first time bucket starting at 1970-01-01.    Return value An integer value.\nExample Count can be used to calculate points over a period of time.\nExample:\n# Get the number of points in 'series-001' over the past 24 hours. select count(now) from \u0026quot;series-001\u0026quot; between now - 1d and now "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/derivative/","title":"derivative","tags":[],"description":"","content":"The derivative can be used to get the difference per time unit. When no optional arguments are used the difference per one unit is returned. For example, in a database with second precision the return value will be the difference per second.\nFunction derivative([ts [, ts]])\nArguments    Arguments Description     ts (optional) Time unit; difference per given time unit   second ts (optional) Time window; used to get the difference between the first and last value within the given time window.    Return value A float value.\nExample # Select the difference per second for values in series-001. select derivative(1s) from 'series-001' # Select the difference per second between the first and last value # within each hour for values in 'series-001' select derivative(1s, 1h) from 'series-001'  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/difference/","title":"difference","tags":[],"description":"","content":"The difference between the first value and the last value within the time window.\nDifference without a time span argument will return the difference between values.\nFunction difference([ts])  Arguments    Arguments Description     ts (optional) Time window; the difference between the first value and the last value within the time window.    Return value An integer or float value depending on the series data type.\nExample # Select difference between values in series-001. select difference() from 'series-001'  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/filter/","title":"filter","tags":[],"description":"","content":"Filter is used to filter the result by testing it to a value, regular expression or condition.\nFunction filter(val_regex_or_condition)  Arguments    Arguments Description     val_regex_or_condition A value, regular expression or condition    Return value An integer, float or string value depending on the series data type.\nExample # Select all values from 'series-001' except where the value is 0 select filter(!= 0) from 'series-001' # Select all positive values from 'series-001' select filter(\u0026gt; 0) from 'series-001' # Select all values containing 'error' and not 'unavailable select filter(~'error') =\u0026gt; filter(!~'unavailable') from 'some-log-series' # Select all values starting with 'error' using a regular expression select filter(/error.*/) from 'some-log-series' # Filter out Not-a-number (nan) and Infinite values select filter(!=nan) =\u0026gt; filter(!=inf) =\u0026gt; filter(!=-inf) from 'some-float-series'  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/first/","title":"first","tags":[],"description":"","content":"Returns the first value in each ts time window. Or if no time window is provided it just returns the first value of the series.\nFunction first([ts])  Arguments    Arguments Description     ts (optional) Time window.    Return value An integer, float or string value depending on the series data type.\nExample # Select the first value from 'series-001' select first() from 'series-001' # Select the first value per day from 'series-001' select first(1d) from 'series-001' # Select the first value in 2018 from 'series-001' select first() from 'series-001' after '2018'  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/interval/","title":"interval","tags":[],"description":"","content":"Returns the difference between the timestamps. This function will give the same result as timeval() =\u0026gt; difference() but is slightly faster. Since all timestamps are in order, the difference will always be a positive value.\nFunction interval()  Arguments None\nReturn value The returned series will contain the difference between timestamps as their values. The timestamp of the difference is the latest of the two compared timestamps.\nExample # Select the interval between timestamps from 'series-001' select interval() from 'series-001'  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/last/","title":"last","tags":[],"description":"","content":"Returns the last value in each ts time window. Or if no time window is provided it just returns the last value of the series.\nFunction last([ts])  Arguments    Arguments Description     ts (optional) Time window.    Return value An integer, float or string value depending on the series data type.\nExample # Select the last value from 'series-001' select last() from 'series-001' # Select the last value per day from 'series-001' select last(1d) from 'series-001' # Select the last value in 2017 from 'series-001' select last() from 'series-001' before '2018'  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/limit/","title":"limit","tags":[],"description":"","content":"Returns no more than the provided number of points and in case more points are found the aggregation function is used to reduce the number of points.\nFunction limit(max_points, aggr_function)  Arguments    Arguments Description     max_points Maximum number of points that gets returned.   aggr_function Aggregation function used if needed.    Return value Returns at most max_points and uses a given aggregation function to reduce the number of points if needed.\nExample # Returns at most 100 points for 'my-series'. The original values are # returned in case hundred or less points are found. In case more points # are found a mean aggregation function is used. select limit(100, mean) from \u0026quot;my-series\u0026quot;  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/max/","title":"max","tags":[],"description":"","content":"Max can be used to identify the highest value in the selected time window. If no time window is provided it returns the highest value of the series.\nFunction max([ts])  Arguments    Arguments Description     ts (optional) Time window.    Return value An integer or float value depending on the series data type.\nExample # Get the maximum value in 'series-001' over the last week. select max(now) from \u0026quot;series-001\u0026quot; between now - 1w and now  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/mean/","title":"mean","tags":[],"description":"","content":"Mean is used to calculate the average values per selected time window. If no time window is provided it returns the mean of the series.\nFunction mean([ts])  Arguments    Arguments Description     ts (optional) Time window.    Return value A float value.\nExample # Get average value of 'series-001' up until now. select mean(now) from \u0026quot;series-001\u0026quot; before now  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/median/","title":"median","tags":[],"description":"","content":"The median is a robust measure of central location, and is less affected by the presence of outliers in your data. When the number of data points is odd, the middle data point is returned as float value. When the number of data points is even, the median is interpolated by taking the average of the two middle values.\nIf no time window is provided it returns the median of the series.\nFunction median([ts])  Arguments    Arguments Description     ts (optional) Time window.    Return value A float value.\nExample # Select the median grouped by 1 minute and return the difference for that result select median(1m) =\u0026gt; difference() from \u0026quot;series-001\u0026quot;  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/median_high/","title":"median high","tags":[],"description":"","content":"The high median is always a member of the data set. When the number of data points is odd, the middle value is returned. When it is even, the larger of the two middle values is returned.\nIf no time window is provided it returns the median_high of the series.\nFunction median_high([ts])  Arguments    Arguments Description     ts (optional) Time window.    Return value An integer or float value depending on the series data type.\nExample # Select the median_high grouped by 1 minute and return the difference for that result select median_high(1m) =\u0026gt; difference() from \u0026quot;series-001\u0026quot;  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/median_low/","title":"median low","tags":[],"description":"","content":"The low median is always a member of the data set. When the number of data points is odd, the middle value is returned. When it is even, the smaller of the two middle values is returned.\nIf no time window is provided it returns the median_low of the series.\nFunction median_low([ts])  Arguments    Arguments Description     ts (optional) Time window.    Return value An integer or float value depending on the series data type.\nExample # Select the median_low grouped by 1 minute and return the difference for that result select median_low(1m) =\u0026gt; difference() from \u0026quot;series-001\u0026quot;  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/min/","title":"min","tags":[],"description":"","content":"Min is the opposite of max, you identify the lowest value in the selected time window. If no time window is provided it returns the lowest value of the series.\nFunction min([ts])  Arguments    Arguments Description     ts (optional) Time window.    Return value An integer or float value depending on the series data type.\nExample # Get the minimum value per day from 'series-001' between two dates. select min(1d) from \u0026quot;series-001\u0026quot; between '2016-11-14' and '2016-11-21'  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/pvariance/","title":"pvariance","tags":[],"description":"","content":"Returns the population variance of data, a non-empty iterable of real-valued numbers. Variance is a measure of the variability (spread or dispersion) of data. A large variance indicates that the data is spread out; a small variance indicates it is clustered closely around the mean.\nIf no time window is provided it returns the pvariance of the series.\nFunction pvariance([ts])  Arguments    Arguments Description     ts (optional) Time window.    Return value A float value.\nExample # Select the pvariance grouped by 1 minute select pvariance(1m) from \u0026quot;series-001\u0026quot;  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/stddev/","title":"stddev","tags":[],"description":"","content":"Returns the standard deviation which is the square root of its variance. If no time window is provided it returns the standard deviation of the series.\nFunction stddev([ts])  Arguments    Arguments Description     ts (optional) Time window.    Return value A float value.\nExample # Select standard deviation grouped by 1 hour. select stddev(1h) from 'series-001'  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/sum/","title":"sum","tags":[],"description":"","content":"Sum can be used when you want to know the sum of the values over a period of time. If no time window is provided it returns the sum of the values in the series.\nFunction sum([ts])  Arguments    Arguments Description     ts (optional) Time window.    Return value An integer or float value depending on the series data type.\nExample # Get the sum of the values collected over the last 24 hours per hour. select sum(1h) from \u0026quot;series-001\u0026quot; between now - 1d and now  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/timeval/","title":"timeval","tags":[],"description":"","content":"Returns the timestamp of series as their values. By itself this is not very useful but it might be combined with another aggregation function to get a specific result. SiriDB has function interval() for the common combination timeval() =\u0026gt; difference().\nFunction timeval()  Arguments None\nReturn value The returned series will contain points where each point will have a value equal to the timestamp.\nExample # Select the timestamps as values from 'series-001' select timeval() from 'series-001'  "},{"uri":"https://docs.siridb.net/query_data/aggregate_functions/variance/","title":"variance","tags":[],"description":"","content":"Returns the sample variance of data, an iterable of at least two real-valued numbers. Variance is a measure of the variability (spread or dispersion) of data. A large variance indicates that the data is spread out; a small variance indicates it is clustered closely around the mean.\nIf no time window is provided it returns the variance of the series.\nFunction  variance([ts])  Arguments    Arguments Description     ts (optional) Time window.    Return value A float value.\nExample # Select the variance grouped by 1 minute select variance(1m) from \u0026quot;series-001\u0026quot;  "},{"uri":"https://docs.siridb.net/query_data/timeit_debugging/","title":"timeit (debugging)","tags":[],"description":"","content":"Can be placed in front of any query and will return information about the time it took to process the query.\nSyntax timeit \u0026lt;any_query\u0026gt;  Example result { \u0026quot;__timeit__\u0026quot;: [ { \u0026quot;time\u0026quot;: 0.001156334212755393, \u0026quot;server\u0026quot;: \u0026quot;server04.siridb.net:9010\u0026quot; }, { \u0026quot;time\u0026quot;: 0.001481771469116211, \u0026quot;server\u0026quot;: \u0026quot;server01.siridb.net:9010\u0026quot; } ] }  Here __timeit__ is an array containing response data from each server involved in processing the query. The last server in this list is the server who has received the query. Since this server is responsible for sending the response it has to wait for all other servers to complete. Therefore the query time for this server will always be the highest value of all servers in the list.\n"},{"uri":"https://docs.siridb.net/series/","title":"Series","tags":[],"description":"","content":"Series Everything about Series is discussed here.\nSeries or time series can be seen as lists of data points. These time series in SiriDB are uniquely identified by name and can have any number of points. A single point consists of a timestamp and value. SiriDB supports time series for numeric data types (integer or float) and strings. Time series can be queried by name, regular expressions or dynamic groups.\n"},{"uri":"https://docs.siridb.net/series/list_series/","title":"list series","tags":[],"description":"","content":"Lists series in the SiriDB cluster.\nSyntax list series [columns] [match_series] [where ...] [limit ...]  "},{"uri":"https://docs.siridb.net/series/list_series/columns/","title":"columns","tags":[],"description":"","content":"Valid columns are:\n name: Series name pool: Pool where the series is assigned to start: Time-stamp of the first value in the series end: Time-stamp of the last value in the series length: The number of points in a series type: The series type. (\u0026ldquo;integer\u0026rdquo;, \u0026ldquo;float\u0026rdquo; or \u0026ldquo;string\u0026rdquo;) shard_duration: The shard duration for this series on this particular SiriDB server (0 for series which only use the buffer)  When no columns are provided the default is used. (name)\nExamples # list all series starting with \u0026quot;linux\u0026quot; by name list series /linux.*/ # list all series starting with \u0026quot;linux\u0026quot; by name, type, length and pool list series name, type, length, pool /^series.*/  "},{"uri":"https://docs.siridb.net/series/list_series/match_series/","title":"match series","tags":[],"description":"","content":"Series can be matched using different methods. Groups can help to quickly get the required series even in a database with millions of unique series.\nSyntax \u0026lt;series_name | regular_expression | group\u0026gt; [update_function \u0026lt;match_series\u0026gt;]  Series name A series name is a string containing the series name.\nAn advantage of using series names in a SiriDB cluster is that we know in which pool the series exists, because SiriDB sends data to a pool based on the series name. The given query will therefore only be send to the applicable pool(s). When using a regular expression or group match we don\u0026rsquo;t know which pool contains the series, so each pool needs to be queried.\nExample:\nlist series 'series-001'  Regular expression Regular expressions can be used to select series.\n Note\nEach pool in a SiriDB cluster will look for matching series. If you plan to use a regular expression multiple times, you should consider creating a group for the expression.\n Example:\n# list all series starting with \u0026quot;linux\u0026quot; list series /linux.*/ # list all series starting with \u0026quot;linux\u0026quot; (case-insensitive) list series /linux.*/i # list all series not starting with \u0026quot;linux\u0026quot; list series /(?!linux).*/ # list all series not containing \u0026quot;linux\u0026quot; list series /((?!linux).)*/  Group Groups are basically cached regular expression and can be used together with normal regular expressions. When you use a regular expression to match series in a group, it\u0026rsquo;s best to first select the group and then the regular expression. This way the regular expression only needs to validate series inside the group.\nExamples:\n# list all series in group \u0026quot;linux\u0026quot; list series `linux` # list all series in group \u0026quot;linux\u0026quot; with \u0026quot;cpu\u0026quot; in the name # note that we first select the group so the regular expression only # needs to be validated on series in the group. list series `linux` \u0026amp; /.*cpu.*/  Update functions When selecting series you can combine series-names, regular-expressions and groups. Update functions tell SiriDB how to combine the selection. SiriDB knows four update functions:\n difference (alias: -) symmentric_difference (alias: ^) union (aliases: , and |) intersection (alias: \u0026amp;)  Examples:\n# list multiple series using union (we actually use the alias here) list series 'series-001', 'series-002', 'series-003' # list series in group \u0026quot;linux\u0026quot; except series which are also in group \u0026quot;cpu\u0026quot; list series `linux` - `cpu` # list series when member of group \u0026quot;linux\u0026quot; or group \u0026quot;cpu\u0026quot; but not both list series `linux` ^ `cpu` # list series that are both members of `linux` and `cpu` except when # a series name contains \u0026quot;test\u0026quot;. list series `linux` \u0026amp; `cpu` - /.*test.*/ # list series in group `linux` and view their length. list series name, length `linux` # list series in group `linux` which have their last data point more # than 100 days ago list series `linux` where end \u0026lt; now - 100d # sample output (list series) { \u0026quot;columns\u0026quot;: [\u0026quot;name\u0026quot;], \u0026quot;series\u0026quot;: [ [\u0026quot;series-001\u0026quot;], [\u0026quot;series-002\u0026quot;] ] }  "},{"uri":"https://docs.siridb.net/series/count_series/","title":"count series","tags":[],"description":"","content":"Count series in the SiriDB cluster. For more information about how to select series see list series.\nCount series length gives the total number of points for the selected series.\nSyntax count series [length] [match_series] [where ...]  Examples # Get number of series count series # Get the total number of points in the database count series length # Get number of series in group `group_server01` count series `group_server01` # Get number of points for series in pool 0 count series length where pool == 0 # Get the number of series which started in the last week count series where start \u0026gt; now - 1w and start \u0026lt;= now  Example output (series):\n{\u0026quot;series\u0026quot;: 1105946}  Example output (series length):\n{\u0026quot;series_length\u0026quot;: 77450345251}  "},{"uri":"https://docs.siridb.net/series/alter_series/","title":"alter series","tags":[],"description":"","content":"Use alter series to tag or untag series.\nSyntax alter series match_series [where] tag/untag `tagname`  See:\n tag untag Tagging  "},{"uri":"https://docs.siridb.net/series/alter_series/tag/","title":"tag","tags":[],"description":"","content":"Examples # Tag series alter series 'my-series-001', 'my-series-002' tag `my-series` # Another tag example alter series /linux.*/ where type == float tag `linux-float`  "},{"uri":"https://docs.siridb.net/series/alter_series/untag/","title":"untag","tags":[],"description":"","content":"Examples # Untag series alter series 'my-series-001', 'my-series-002' untag `my-series`  "},{"uri":"https://docs.siridb.net/series/drop_series/","title":"drop series","tags":[],"description":"","content":"Drops series from SiriDB. Optionally you can use a match and/or where statement to filter the series you want to drop. For more information about how to match series look at list series.\nSiriDB has a mechanism to protect you from accidentally dropping all (or many) series. This is done with a threshold value. If the server receives a drop request that contains more series than the threshold, the request is denied and you receive an error_msg. The drop_threshold value will not be checked by other servers in the cluster.\nYou can view the current drop_threshold with show drop_threshold. See alter database on how to change this value. The default drop threshold is set to 1 (100%) which means you cannot drop all series but any other amount will pass. The drop threshold can be set to a value between 0 and 1. For example a value of 0.5 means you cannot drop more than 50% of the available series.\nIt is also possible to ignore the drop_threshold for one request by adding set ignore_threshold true.\n Tip\nBefore using a regular expression to drop series, you can check the expression first using count series and/or list series and see if your match has the expected result.\n Syntax drop series [series_match] [where ...] [set ignore_threshold true/false]  Examples # Drop series \u0026quot;series-001\u0026quot; drop series \u0026quot;series-001\u0026quot; # Drop all series drop series set ignore_threshold true  "},{"uri":"https://docs.siridb.net/shards/","title":"Shards","tags":[],"description":"","content":"Shards Everything about Shards is discussed here.\nShards are files for specific time-ranges within a time series. A shard can, for example, contain all data of a certain year / month / day / etc. On the initial setup of a SiriDB database the shard duration must be chosen.\n"},{"uri":"https://docs.siridb.net/shards/list_shards/","title":"list shards","tags":[],"description":"","content":"Lists shards in the SiriDB cluster.\nSyntax list shards [columns] [where ...] [limit ...]  "},{"uri":"https://docs.siridb.net/shards/list_shards/columns/","title":"columns","tags":[],"description":"","content":"Valid columns are:\n start: Start timestamp for the shard end: End timestamp for the shard sid: Shard identifier (the same sid usually exist on multiple servers). server: Server name on which the shard exists. pool: Pool where the shard in exists. status: Status flags for the shard. type: Type of the shard (number or log). size: Size of the shard. This is the total shard size over all pools. When a pool has more servers (replicas) the displayed size can vary when running this query multiple times because servers are responsible for optimizing their own shards and this could result in different shard sizes.  When no columns are provided the default is used. (sid, pool, server, start, end)\nExamples # List all shards list shards # List shards used for data older then 100 days list shards where start \u0026lt; now - 100d # sample output (list shards) { \u0026quot;columns\u0026quot;: [\u0026quot;sid\u0026quot;, \u0026quot;pool\u0026quot;, \u0026quot;server\u0026quot;, \u0026quot;start\u0026quot;, \u0026quot;end\u0026quot; ], \u0026quot;shards\u0026quot;: [ [1449705600, 0, \u0026quot;srv01:9010\u0026quot;, 1449705600, 1450310400], [1449705601, 0, \u0026quot;srv01:9010\u0026quot;, 1449705600, 1450310400], ... ] } "},{"uri":"https://docs.siridb.net/shards/count_shards/","title":"count shards","tags":[],"description":"","content":"Count shards returns the number of shards on all online servers in a SiriDB cluster. This means that offline servers are ignored and replica servers are included in the query. It\u0026rsquo;s also possible to count the shards size in case you want to see the amount of disk-space the shards are using.\nSyntax count shards [size] [where ...]  Examples # Get number of shards count shards # Get number of shards for the current points. (assuming you have # no shards for points in the future) count shards where end \u0026gt; now # Get the amount of disk space (in bytes) which shards are using # on server01. count shards size where server == 'server01'  Example output (count shards):\n{\u0026quot;shards\u0026quot;: 51}  Example output (count shards size):\n{\u0026quot;shards_size\u0026quot;: 355243846}  "},{"uri":"https://docs.siridb.net/shards/drop_shards/","title":"drop shards","tags":[],"description":"","content":"Drops an existing shard using the shard id (sid). Use list shards for an overview of the current shards. This statement requires all pools to have at least one online server. The number of dropped shard in the result message only contains the dropped shards of one member of a pool, not the shards which are dropped by a replica. This is different from the count shards statement which includes the shards on replica servers as well.\n Note\nThis statement is protected with a threshold. See drop series and alter database for more information about this threshold value.\n Syntax drop shards [where ...] [set ignore_threshold true/false]  Example # Drop shards for points which are older than one year drop shards where end \u0026lt; now - 52w  "},{"uri":"https://docs.siridb.net/groups/","title":"Groups","tags":[],"description":"","content":"Groups Everything about Groups is discussed here.\nGroups are selections of a number of series that meet a certain regular expression.\n"},{"uri":"https://docs.siridb.net/groups/create_group/","title":"create group","tags":[],"description":"","content":"Groups should be between backticks to make them different from strings. Since a group is basically a cached regular expression we need to provide the regular expression we want to use for the group.\nSyntax create group `groupname` for /regular_expression/  Example # Create a group linux create group `linux` for /linux.*/  "},{"uri":"https://docs.siridb.net/groups/count_groups/","title":"count groups","tags":[],"description":"","content":"Count groups returns the number of groups defined in the database.\nSyntax count groups [where ...]  Examples # Get number of groups count groups # Get number of groups with more than 100 series count groups where series \u0026gt; 100  Example output:\n{\u0026quot;groups\u0026quot;: 23} "},{"uri":"https://docs.siridb.net/groups/list_groups/","title":"list groups","tags":[],"description":"","content":"Lists groups in the SiriDB cluster.\nSyntax list groups [columns] [where ...] [limit ...]  "},{"uri":"https://docs.siridb.net/groups/list_groups/columns/","title":"columns","tags":[],"description":"","content":"Valid columns are:\n name: Group name series: Number of series in the group. expression: Show the expression used for this group.  When no columns are provided the default is used. (name)\nExamples # View all groups list groups # View groups and the expression used list groups name, expression # sample output (list groups) { \u0026quot;columns\u0026quot;: [\u0026quot;name\u0026quot;], \u0026quot;groups\u0026quot;: [ [\u0026quot;linux\u0026quot;], [\u0026quot;windows\u0026quot;] ] }  "},{"uri":"https://docs.siridb.net/groups/alter_group/","title":"alter group","tags":[],"description":"","content":"Alter the name or regular expression of a group.\nSyntax alter group `groupname` set \u0026lt;option\u0026gt;  See:\n set_expression set_name  "},{"uri":"https://docs.siridb.net/groups/alter_group/set_expression/","title":"set expression","tags":[],"description":"","content":"Change the regular expression for a group.\nExamples # Create group `linux` create group `linux` for /linux.*/ # Change expression so we will match case insensitive alter group `linux` set expression /linux.*/i  "},{"uri":"https://docs.siridb.net/groups/alter_group/set_name/","title":"set name","tags":[],"description":"","content":"Change the name for a group.\n Note\nThis statement expects a normal string using single or double quotes. The reason is that \u0026lsquo;set name\u0026rsquo; expects a string and not a group.\n Example # Rename group `linux` to `ubuntu` alter group `linux` set name 'ubuntu'  "},{"uri":"https://docs.siridb.net/groups/drop_groups/","title":"drop groups","tags":[],"description":"","content":"Drops an existing group.\nSyntax drop group `groupname`  Example # Drop group `linux` drop group `linux` "},{"uri":"https://docs.siridb.net/tagging/","title":"Tagging","tags":[],"description":"","content":"Tagging Tags are used to create a fixed selection of series. This section contains documentation on count, list and drop tags.\nSee alert series for tagging and un-tagging series.\nTagging requires SiriDB version 2.0.38 or higher\n "},{"uri":"https://docs.siridb.net/tagging/count_tags/","title":"count tags","tags":[],"description":"","content":"Count tags returns the number of tags defined in the database.\nSyntax count tags [where ...]  Examples # Get number of tags count tags # Get number of tags with more than 100 series count tags where series \u0026gt; 100  Example output:\n{\u0026quot;tags\u0026quot;: 23}  "},{"uri":"https://docs.siridb.net/tagging/list_tags/","title":"list tags","tags":[],"description":"","content":"Lists tags in the SiriDB cluster.\nSyntax list tags [columns] [where ...] [limit ...]  "},{"uri":"https://docs.siridb.net/tagging/list_tags/columns/","title":"columns","tags":[],"description":"","content":"Valid columns are:\n name: Tag name series: Number of series in the tag.  When no columns are provided the default is used. (name)\nExamples # View all tags list tags # View tags and the number of series tagged list tags name, series # sample output (list tags) { \u0026quot;columns\u0026quot;: [\u0026quot;name\u0026quot;, \u0026quot;series\u0026quot;], \u0026quot;tags\u0026quot;: [ [\u0026quot;linux\u0026quot;, 52042], [\u0026quot;windows\u0026quot;, 7] ] }  "},{"uri":"https://docs.siridb.net/tagging/alter_tag/","title":"alter tag","tags":[],"description":"","content":"Alter the name of a tag.\nSyntax alter tag `tagname` set \u0026lt;option\u0026gt;  See:\n set_name  "},{"uri":"https://docs.siridb.net/tagging/alter_tag/set_name/","title":"set name","tags":[],"description":"","content":"Change the name for a tag.\n Note\nThis statement expects a normal string using single or double quotes. The reason is that \u0026lsquo;set name\u0026rsquo; expects a string and not a tag.\n Example # Rename tag `linux` to `ubuntu` alter tag `linux` set name 'ubuntu'  "},{"uri":"https://docs.siridb.net/tagging/drop_tag/","title":"drop tag","tags":[],"description":"","content":"Drops an existing tag.\nSyntax drop tag `tagname`  Example # Drop tag `linux` drop tag `linux`  "},{"uri":"https://docs.siridb.net/servers/","title":"Servers","tags":[],"description":"","content":"Servers Everything that has to do with server management within SiriDB.\n"},{"uri":"https://docs.siridb.net/servers/count_servers/","title":"count servers","tags":[],"description":"","content":"Count servers returns the number of servers in a SiriDB cluster.\nReceived_points are the number of points received by a server since uptime. And the selected points are the total number of queried points since uptime After a restart these counters are reset to zero.\n Info\nReceived points only shows the number of points after uptime. For the total number of points you can use count series length\n Syntax count servers [received_points/selected_points] [where ...]  Example # Get number of servers count servers # Get number of servers in pool 0 count servers where pool == 0 # Get total received points since uptime count servers received_points # Get total number of selected (queried) points since uptime count servers selected_points  Example output (count servers):\n{\u0026quot;servers\u0026quot;: 6}  Example output (count servers received_points):\n{\u0026quot;count\u0026quot;: 21573435683}  "},{"uri":"https://docs.siridb.net/servers/list_servers/","title":"list servers","tags":[],"description":"","content":"List servers in a SiriDB Cluster. This command can be useful to view status information about a server.\nSyntax list servers [columns] [where ...] [limit ...]  "},{"uri":"https://docs.siridb.net/servers/list_servers/columns/","title":"columns","tags":[],"description":"","content":"Valid columns are:\n active_handles: Returns the active handles which can be used as an indicator on how busy a server is. active_tasks: Returns the active tasks for the current database. address: Server address. buffer_path: Path where this server keeps the buffer file. buffer_size: Size the server uses for one series in the buffer. dbpath: Path where the server stores the database. fifo_files: Number of fifo files which are used to update the replica server. This value is 0 if the server has no replica. A value greater than 1 could be an indication that replication is not working. idle_percentage: Returns percentage of idle time since the database was loaded. idle_time: Returns the idle time in seconds since the database was loaded. ip_support: IP Support setting on the server. (ALL/ IPV4ONLY/ IPV6ONLY) libuv: Version of libuv library. log_level: Current loglevel for the server. max_open_files: Returns the maximum open files value used for sharding on this server. (If this value is lower than expected, please check the log files for SiriDB as startup time) mem_usage: Shows memory usage for the server in MB\u0026rsquo;s. name: Server name. online: True when the server is online. open_files: Number of open files for this database on the server. pool: Returns the pool ID for the server. port: Server port. received_points: Returns the number of received points by the server. On each restart of the SiriDB Server the counter will reset to 0. This value is only incremented when the server is receiving points from a client. reindex_progress: Returns the re-index status. Only available when the database is re-indexing series over pools. selected_points: Returns the selected points on the server. On each restart of the SiriDB Server the counter will reset to 0. This value includes all points which are read from the local shards and the points received from other servers to respond to a select query. The value is only incremented when the server received the select query from a client. startup_time: Time it takes to start the server. status: Current server status. sync_progress: Return synchronization status while creating a new replica server. tee_pipe_name: Returns the name of an existing file to where SiriDB can dump its data. uptime: Uptime in seconds. uuid: Server UUID (unique ID) version: SiriDB version  When no columns are provided the default is used. (name, pool, version, online, status)\nExamples  # list all servers in a SiriDB cluster. list servers # list all offline servers list servers where online == false # view memory usage and open files on all servers. list servers name, mem_usage, open_files # sample output (list servers) { \u0026quot;columns\u0026quot;: [\u0026quot;name\u0026quot;, \u0026quot;pool\u0026quot;, \u0026quot;version\u0026quot;, \u0026quot;online\u0026quot;, \u0026quot;status\u0026quot;], \u0026quot;servers\u0026quot;: [ [\u0026quot;siri1:9010\u0026quot;, 0, \u0026quot;2.0.10\u0026quot;, true, \u0026quot;running\u0026quot;], [\u0026quot;siri2:9010\u0026quot;, 1, \u0026quot;2.0.10\u0026quot;, true, \u0026quot;running\u0026quot;] ] }  "},{"uri":"https://docs.siridb.net/servers/alter_server/","title":"alter server","tags":[],"description":"","content":"You can alter the address, port, backup_mode, tee_pipe_name and/or log_level of a server. You can use both, a server\u0026rsquo;s name or uuid to change a server. To view the current servers names and uuids use the command: list servers name, uuid\nSyntax alter server \u0026lt;server_uuid / server_name\u0026gt; set \u0026lt;option\u0026gt;  "},{"uri":"https://docs.siridb.net/servers/alter_server/backup_mode/","title":"set backup mode","tags":[],"description":"","content":"When a backup_mode is enabled on a SiriDB server, all files in the database directory will be closed (both dbpath and buffer_path). This way you can make a backup of SiriDB without having problems with open files.\nExample # Enable the backup_mode alter server f851c6a4-820e-11e5-9661-080027f37001 set backup_mode true  "},{"uri":"https://docs.siridb.net/servers/alter_server/log_level/","title":"set log level","tags":[],"description":"","content":"With the argument \u0026ndash;log-level it\u0026rsquo;s possible to start with a certain log level. The default log level is info. If you want the log level to change while being online, this command can be used. It will not be saved when the server is restarted.\nValid log levels are \u0026ldquo;debug\u0026rdquo;, \u0026ldquo;info\u0026rdquo;, \u0026ldquo;warning\u0026rdquo;, \u0026ldquo;error\u0026rdquo; and \u0026ldquo;critical\u0026rdquo;\nExample # Change the log-level to \u0026quot;debug\u0026quot; alter server f851c6a4-820e-11e5-9661-080027f37001 set log_level debug  "},{"uri":"https://docs.siridb.net/servers/alter_server/set_address_port/","title":"set address/port","tags":[],"description":"","content":"Usually it\u0026rsquo;s not required to change the server\u0026rsquo;s address or port using this command but instead you should change the address/port in the configuration file (default /etc/siridb/siridb.conf). When the server gets online it will contact all SiriDB servers and they will automatically update to the new address/port in their local database. However, if all servers in a cluster are updated at once, we need to tell at least one SiriDB server where to find the other server(s). This should be the only situation when this command is required.\nExample # srv1 and srv2 both have changed to another address so # they are not able find each other. The command below # is executed on srv1 and tells where to find srv2. alter server 'srv2.old.domain:9010' set address 'srv2.new.domain' # After executing the above command, srv1 will connect to srv2 # using the new domain name and announces its own new address so # srv2 will update the address automatically and will connect # to srv1 again.  "},{"uri":"https://docs.siridb.net/servers/alter_server/set_tee_pipe_name/","title":"set tee pipe name","tags":[],"description":"","content":"Some projects like Enodo project may benefit from receiving all SiriDB data. Because these projects usually experience the same scaling problems as SiriDB does, we have chosen to support a tee option on each SiriDB server. Using this feature makes it possible to install a service on at least one SiriDB server in each pool. Such a service should install a UNIX Pipe server which accepts SiriDB data in QPack format.\nSiriDB will then try to connect to the pipe, and once a connection is established, all SiriDB data points with the SiriDB pool as target, will be forwarded to the pipe.\nA package send to the pipe will have a header like:\n┌───────────┬───────────┬───────────┬───────────┬───────────┐ │ LEN (4) │ ID (2) │ TYPE (1) │ CHK (1) │ DATA (..) │ └───────────┴───────────┴───────────┴───────────┴───────────┘    Field Description     LEN Length of the data, stored as Unsigned, 32-bit, Little Endian. The header size is not included in the length.   ID Can be ignored   TYPE Can be ignored   DATA Contains the actual data points in QPack format.    The data is packed like:\n{ 'serie-name': [[\u0026lt;TIMESTAMP\u0026gt;, \u0026lt;VALUE\u0026gt;], ...], ... } If you like to disable the tee, then use false instead of a string.\nExample # Change the log-level to \u0026quot;debug\u0026quot; alter server f851c6a4-820e-11e5-9661-080027f37001 set tee_pipe_name '/tmp/data.sock'  "},{"uri":"https://docs.siridb.net/servers/alter_servers/","title":"alter servers","tags":[],"description":"","content":"You can alter the tee_pipe_name and/or log_level for n servers at once. Changing the tee pipe name and log level is explained in more detail at alter server.\nSyntax alter servers [where...] set \u0026lt;option\u0026gt;  Example # Change the log-level to \u0026quot;debug\u0026quot; alter servers where uuid == 'f851c6a4-820e-11e5-9661-080027f37001' set log_level debug  "},{"uri":"https://docs.siridb.net/servers/drop_servers/","title":"drop servers","tags":[],"description":"","content":"Can be used to remove a server. We only allow dropping a server which has a replica since scaling down in number of pools is currently not supported. A server needs to be turned off before it can be dropped.\n Note\nWhen having two servers in a pool, let\u0026rsquo;s call them siri1 and siri2 and for some reason siri2 is broken and does not start. You might be in a situation where siri1 is waiting for siri2 to connect and start to synchronize data. Both servers are not working in this case but when dropping siri2, siri1 removes the \u0026lsquo;wait for synchronization\u0026rsquo; status and starts accepting inserts and queries.\n Syntax drop server \u0026lt;server_uuid / server_name\u0026gt;  Example # Drop server 'siri2:9010'. We first need to turn off # this server and make sure the server has a replica. drop server 'siri2:9010'  "},{"uri":"https://docs.siridb.net/pools/","title":"Pools","tags":[],"description":"","content":"Pools Everything about pools is discussed here.\n"},{"uri":"https://docs.siridb.net/pools/count_pools/","title":"count pools","tags":[],"description":"","content":"Count pools in the SiriDB cluster.\nSyntax count pools [where ...]  Examples # Get number of pools count pools # Count the pools with more than 1000 series count pools where series \u0026gt; 1000  Example output:\n{\u0026quot;pools\u0026quot;:2}  "},{"uri":"https://docs.siridb.net/pools/list_pools/","title":"list pools","tags":[],"description":"","content":"Lists pools in the SiriDB cluster.\nSyntax list pools [columns] [where ...] [limit ...]  "},{"uri":"https://docs.siridb.net/pools/list_pools/columns/","title":"columns","tags":[],"description":"","content":"Valid columns are:\n pool: Returns the pool ID. series: Number of series in the pool. servers: Number of servers in the pool.  When no columns are provided the default is used. (pool, servers, series)\nExamples # list pools with more than 1000 series list pools where series\u0026gt;1000 #list all series by pool and series list pools pool, series  "},{"uri":"https://docs.siridb.net/users/","title":"Users","tags":[],"description":"","content":"Users Everything that has to do with user management within SiriDB.\n"},{"uri":"https://docs.siridb.net/users/create_user/","title":"create user","tags":[],"description":"","content":"Create a new user. This will create a new user without access to SiriDB. For more information on how to grant access to a user see grant access.\nSyntax create user 'my-username' set password 'my-password'  Examples # This will create a new user 'iris' with password 'siri' create user 'iris' set password 'siri' # Grant \u0026quot;read\u0026quot; access to \u0026quot;iris\u0026quot; grant read to user \u0026quot;iris\u0026quot;  "},{"uri":"https://docs.siridb.net/users/count_users/","title":"count users","tags":[],"description":"","content":"Count users returns the number of users.\nSyntax count users [where ...]  Examples # Get number of users count users # Get number of users not equal to 'iris' count users where name != 'iris'  Example output:\n{\u0026quot;users\u0026quot;: 6}  "},{"uri":"https://docs.siridb.net/users/list_users/","title":"list users","tags":[],"description":"","content":"List the users of SiriDB.\nSyntax list users [columns] [where ...] [limit ...]  "},{"uri":"https://docs.siridb.net/users/list_users/columns/","title":"columns","tags":[],"description":"","content":"Valid columns are:\n name: User name. access: Access rights assigned to the user.  When no columns are provided the default is used. (name, access)\nExamples # List all users list users # List users with full access list users where access == full  "},{"uri":"https://docs.siridb.net/users/alter_user/","title":"alter user","tags":[],"description":"","content":"Change the name or password of a user.\nSyntax alter user 'username' set \u0026lt;option\u0026gt;  Example # Change the password for \u0026quot;iris\u0026quot; to \u0026quot;siri\u0026quot; alter user 'iris' set password 'siri'  "},{"uri":"https://docs.siridb.net/database/","title":"Database","tags":[],"description":"","content":"Database Everything that has to do with database configuration within SiriDB.\n"},{"uri":"https://docs.siridb.net/database/alter_database/","title":"alter database","tags":[],"description":"","content":"Settings of the database that can be altered:\n drop_threshold expiration_log expiration_num list_limit select_points_limit set_timezone  Syntax alter database set \u0026lt;option\u0026gt;  "},{"uri":"https://docs.siridb.net/database/alter_database/drop_threshold/","title":"drop threshold","tags":[],"description":"","content":"This value is used to protect you from accidentally dropping data from SiriDB. The threshold is a value between 0 and 1 (0/100%). The threshold value is only checked against the pool receiving your query. The default threshold value is 1 (100%) but it might be a good idea to change this to a lower value.\n Note\nCurrently the drop_threshold is only used for dropping series and shards because these are the only queries where we allow to drop multiple entries at once.\n Examples # Do not allow dropping more than 10% series or shards at once alter database set drop_threshold 0.1 # View the current threshold show drop_threshold  "},{"uri":"https://docs.siridb.net/database/alter_database/expiration_log/","title":"expiration log","tags":[],"description":"","content":"When the expiration_log is enabled than log shards that are older than the provided value will be dropped. This setting should be an integer value with the time precision of the database.\nBy default this setting is disabled.\nExamples # Suppose we have a second precision database, # then this will drop log shards, older than 4 weeks alter database set expiration_log 3600*24*7*4 # Disable shard expiration: alter database set expiration_log 0 After setting the expiration_log that results in more shards being dropped than the drop_threshold allows, an error is displayed and set ignore_threshold true may be added to ignore this warning.\nalter database set expiration_log 52w set ignore_threshold true "},{"uri":"https://docs.siridb.net/database/alter_database/expiration_num/","title":"expiration num","tags":[],"description":"","content":"When the expiration_num is enabled than number shards that are older than the provided value will be dropped. This setting should be an integer value with the time precision of the database.\nBy default this setting is disabled.\nExamples # Suppose we have a second precision database, # then this will drop number shards, older than 4 weeks alter database set expiration_num 3600*24*7*4 # Disable shard expiration: alter database set expiration_num 0 After setting the expiration_num that results in more shards being dropped than the drop_threshold allows, an error is displayed and set ignore_threshold true may be added to ignore this warning.\nalter database set expiration_num 52w set ignore_threshold true "},{"uri":"https://docs.siridb.net/database/alter_database/list_limit/","title":"list limit","tags":[],"description":"","content":"Change the maximum value which can be used as a limit for a list statement. The default and recommended value is set to ten thousand to prevent queries which could take a large amount of memory. The value must be greater than or equal to 1000.\nExample # Set the list limit to 50 thousand. alter database set list_limit 50000  "},{"uri":"https://docs.siridb.net/database/alter_database/select_points_limit/","title":"select points limit","tags":[],"description":"","content":"Change the maximum points which can be returned by a select query. The default and recommended value is set to one million points. This value is chosen to prevent a single query for taking to much memory and ensures that SiriDB can respond to almost any query in a reasonable amount of time.\nExample # Increase the select points limit to 5 million alter database set select_points_limit 5000000  "},{"uri":"https://docs.siridb.net/database/alter_database/set_timezone/","title":"set timezone","tags":[],"description":"","content":"Change the timezone for the database. When using a date/time in a query, SiriDB needs to convert the given date to a timestamp. Default NAIVE is used which means SiriDB is naive about the time zone and acts as if it\u0026rsquo;s a local time.\n Warning\nWhen using a SiriDB database over multiple time zones it\u0026rsquo;s probably best to set the time zone to anything other than NAIVE since with NAIVE the server receiving the query will convert the date to a local time-stamp. This means that sending the same query to a server in another time zone could respond with a different result.\nHowever, it\u0026rsquo;s always possible in the query to specify a UTC date by adding \u0026lsquo;Z\u0026rsquo; to the date. For example: \u0026lsquo;2016-01-11 16:00Z\u0026rsquo; will use UTC as it\u0026rsquo;s time zone, no matter what time zone the database has configured.\n For a list of valid time zones see timezones.\nExamples # Set the default time zone to UTC alter database set timezone 'UTC' # Set the default time zone to NAIVE alter database set timezone 'NAIVE' # Set the default time zone to Europe/Amsterdam alter database set timezone 'Europe/Amsterdam'  "},{"uri":"https://docs.siridb.net/database/timezones/","title":"timezones","tags":[],"description":"","content":"For information on how to change the time zone see alter database.\n Note\nThere is one special time-zone, named NAIVE which is the default time-zone when creating a database. When this time-zone is used, a SiriDB server handles a given date as a local time. All other time zones can be found below.\n  Africa/Abidjan Africa/Accra Africa/Addis_Ababa Africa/Algiers Africa/Asmara Africa/Bamako Africa/Bangui Africa/Banjul Africa/Bissau Africa/Blantyre Africa/Brazzaville Africa/Bujumbura Africa/Cairo Africa/Casablanca Africa/Ceuta Africa/Conakry Africa/Dakar Africa/Dar_es_Salaam Africa/Djibouti Africa/Douala Africa/El_Aaiun Africa/Freetown Africa/Gaborone Africa/Harare Africa/Johannesburg Africa/Juba Africa/Kampala Africa/Khartoum Africa/Kigali Africa/Kinshasa Africa/Lagos Africa/Libreville Africa/Lome Africa/Luanda Africa/Lubumbashi Africa/Lusaka Africa/Malabo Africa/Maputo Africa/Maseru Africa/Mbabane Africa/Mogadishu Africa/Monrovia Africa/Nairobi Africa/Ndjamena Africa/Niamey Africa/Nouakchott Africa/Ouagadougou Africa/Porto-Novo Africa/Sao_Tome Africa/Tripoli Africa/Tunis Africa/Windhoek America/Adak America/Anchorage America/Anguilla America/Antigua America/Araguaina America/Argentina/Buenos_Aires America/Argentina/Catamarca America/Argentina/Cordoba America/Argentina/Jujuy America/Argentina/La_Rioja America/Argentina/Mendoza America/Argentina/Rio_Gallegos America/Argentina/Salta America/Argentina/San_Juan America/Argentina/San_Luis America/Argentina/Tucuman America/Argentina/Ushuaia America/Aruba America/Asuncion America/Atikokan America/Bahia America/Bahia_Banderas America/Barbados America/Belem America/Belize America/Blanc-Sablon America/Boa_Vista America/Bogota America/Boise America/Cambridge_Bay America/Campo_Grande America/Cancun America/Caracas America/Cayenne America/Cayman America/Chicago America/Chihuahua America/Costa_Rica America/Creston America/Cuiaba America/Curacao America/Danmarkshavn America/Dawson America/Dawson_Creek America/Denver America/Detroit America/Dominica America/Edmonton America/Eirunepe America/El_Salvador America/Fort_Nelson America/Fortaleza America/Glace_Bay America/Godthab America/Goose_Bay America/Grand_Turk America/Grenada America/Guadeloupe America/Guatemala America/Guayaquil America/Guyana America/Halifax America/Havana America/Hermosillo America/Indiana/Indianapolis America/Indiana/Knox America/Indiana/Marengo America/Indiana/Petersburg America/Indiana/Tell_City America/Indiana/Vevay America/Indiana/Vincennes America/Indiana/Winamac America/Inuvik America/Iqaluit America/Jamaica America/Juneau America/Kentucky/Louisville America/Kentucky/Monticello America/Kralendijk America/La_Paz America/Lima America/Los_Angeles America/Lower_Princes America/Maceio America/Managua America/Manaus America/Marigot America/Martinique America/Matamoros America/Mazatlan America/Menominee America/Merida America/Metlakatla America/Mexico_City America/Miquelon America/Moncton America/Monterrey America/Montevideo America/Montserrat America/Nassau America/New_York America/Nipigon America/Nome America/Noronha America/North_Dakota/Beulah America/North_Dakota/Center America/North_Dakota/New_Salem America/Ojinaga America/Panama America/Pangnirtung America/Paramaribo America/Phoenix America/Port-au-Prince America/Port_of_Spain America/Porto_Velho America/Puerto_Rico America/Rainy_River America/Rankin_Inlet America/Recife America/Regina America/Resolute America/Rio_Branco America/Santa_Isabel America/Santarem America/Santiago America/Santo_Domingo America/Sao_Paulo America/Scoresbysund America/Sitka America/St_Barthelemy America/St_Johns America/St_Kitts America/St_Lucia America/St_Thomas America/St_Vincent America/Swift_Current America/Tegucigalpa America/Thule America/Thunder_Bay America/Tijuana America/Toronto America/Tortola America/Vancouver America/Whitehorse America/Winnipeg America/Yakutat America/Yellowknife Antarctica/Casey Antarctica/Davis Antarctica/DumontDUrville Antarctica/Macquarie Antarctica/Mawson Antarctica/McMurdo Antarctica/Palmer Antarctica/Rothera Antarctica/Syowa Antarctica/Troll Antarctica/Vostok Arctic/Longyearbyen Asia/Aden Asia/Almaty Asia/Amman Asia/Anadyr Asia/Aqtau Asia/Aqtobe Asia/Ashgabat Asia/Baghdad Asia/Bahrain Asia/Baku Asia/Bangkok Asia/Beirut Asia/Bishkek Asia/Brunei Asia/Chita Asia/Choibalsan Asia/Colombo Asia/Damascus Asia/Dhaka Asia/Dili Asia/Dubai Asia/Dushanbe Asia/Gaza Asia/Hebron Asia/Ho_Chi_Minh Asia/Hong_Kong Asia/Hovd Asia/Irkutsk Asia/Jakarta Asia/Jayapura Asia/Jerusalem Asia/Kabul Asia/Kamchatka Asia/Karachi Asia/Kathmandu Asia/Khandyga Asia/Kolkata Asia/Krasnoyarsk Asia/Kuala_Lumpur Asia/Kuching Asia/Kuwait Asia/Macau Asia/Magadan Asia/Makassar Asia/Manila Asia/Muscat Asia/Nicosia Asia/Novokuznetsk Asia/Novosibirsk Asia/Omsk Asia/Oral Asia/Phnom_Penh Asia/Pontianak Asia/Pyongyang Asia/Qatar Asia/Qyzylorda Asia/Rangoon Asia/Riyadh Asia/Sakhalin Asia/Samarkand Asia/Seoul Asia/Shanghai Asia/Singapore Asia/Srednekolymsk Asia/Taipei Asia/Tashkent Asia/Tbilisi Asia/Tehran Asia/Thimphu Asia/Tokyo Asia/Ulaanbaatar Asia/Urumqi Asia/Ust-Nera Asia/Vientiane Asia/Vladivostok Asia/Yakutsk Asia/Yekaterinburg Asia/Yerevan Atlantic/Azores Atlantic/Bermuda Atlantic/Canary Atlantic/Cape_Verde Atlantic/Faroe Atlantic/Madeira Atlantic/Reykjavik Atlantic/South_Georgia Atlantic/St_Helena Atlantic/Stanley Australia/Adelaide Australia/Brisbane Australia/Broken_Hill Australia/Currie Australia/Darwin Australia/Eucla Australia/Hobart Australia/Lindeman Australia/Lord_Howe Australia/Melbourne Australia/Perth Australia/Sydney Canada/Atlantic Canada/Central Canada/Eastern Canada/Mountain Canada/Newfoundland Canada/Pacific Europe/Amsterdam Europe/Andorra Europe/Athens Europe/Belgrade Europe/Berlin Europe/Bratislava Europe/Brussels Europe/Bucharest Europe/Budapest Europe/Busingen Europe/Chisinau Europe/Copenhagen Europe/Dublin Europe/Gibraltar Europe/Guernsey Europe/Helsinki Europe/Isle_of_Man Europe/Istanbul Europe/Jersey Europe/Kaliningrad Europe/Kiev Europe/Lisbon Europe/Ljubljana Europe/London Europe/Luxembourg Europe/Madrid Europe/Malta Europe/Mariehamn Europe/Minsk Europe/Monaco Europe/Moscow Europe/Oslo Europe/Paris Europe/Podgorica Europe/Prague Europe/Riga Europe/Rome Europe/Samara Europe/San_Marino Europe/Sarajevo Europe/Simferopol Europe/Skopje Europe/Sofia Europe/Stockholm Europe/Tallinn Europe/Tirane Europe/Uzhgorod Europe/Vaduz Europe/Vatican Europe/Vienna Europe/Vilnius Europe/Volgograd Europe/Warsaw Europe/Zagreb Europe/Zaporozhye Europe/Zurich GMT Indian/Antananarivo Indian/Chagos Indian/Christmas Indian/Cocos Indian/Comoro Indian/Kerguelen Indian/Mahe Indian/Maldives Indian/Mauritius Indian/Mayotte Indian/Reunion Pacific/Apia Pacific/Auckland Pacific/Bougainville Pacific/Chatham Pacific/Chuuk Pacific/Easter Pacific/Efate Pacific/Enderbury Pacific/Fakaofo Pacific/Fiji Pacific/Funafuti Pacific/Galapagos Pacific/Gambier Pacific/Guadalcanal Pacific/Guam Pacific/Honolulu Pacific/Johnston Pacific/Kiritimati Pacific/Kosrae Pacific/Kwajalein Pacific/Majuro Pacific/Marquesas Pacific/Midway Pacific/Nauru Pacific/Niue Pacific/Norfolk Pacific/Noumea Pacific/Pago_Pago Pacific/Palau Pacific/Pitcairn Pacific/Pohnpei Pacific/Port_Moresby Pacific/Rarotonga Pacific/Saipan Pacific/Tahiti Pacific/Tarawa Pacific/Tongatapu Pacific/Wake Pacific/Wallis US/Alaska US/Arizona US/Central US/Eastern US/Hawaii US/Mountain US/Pacific UTC  "},{"uri":"https://docs.siridb.net/database/status_information/","title":"status information","tags":[],"description":"","content":"Syntax show [\u0026lt;option\u0026gt; [,\u0026lt;option\u0026gt; [...]]  See available options for more info on each show command:\n show active_handles: Returns the active handles which can be used as an indicator for how busy a server is. show active_tasks: Returns the active tasks for the current database. show buffer_path: Returns the local buffer path on this server. show buffer_size: Returns the buffer size in bytes on this server. show dbname: Returns the database name. show dbpath: Returns the local database path on this server. show drop_threshold: Returns the current drop threshold (value between 0 and 1 representing a percentage). show duration_log: Returns the sharding duration for log data on this database (not supported yet). show duration_num: Returns the sharding duration for num data on this database. show fifo_files: Returns the number of fifo files which are used to update the replica server. This value is 0 if the server has no replica. A value greater than 1 could be an indication that replication is not working. show idle_percentage: Returns percentage of idle time since the database was loaded. show idle_time: Returns the idle time in seconds since the database was loaded. show ip_support: Returns the ip support setting on this server. show libuv: Returns the version of libuv on this server. show list_limit: Returns the maximum value which can be used as limit in a list query. show log_level: Returns the current log level for this server. show max_open_files: Returns the maximum open files value used for sharding on this server (if this value is lower than expected, please check the log files for SiriDB as startup time). show mem_usage: Returns the current memory usage in MB\u0026rsquo;s on this server. show open_files: Returns the number of open files on this server for the selected database (should be 0 when the server is in backup_mode). show pool: Returns the pool ID for this server. show received_points: Returns the number of received points for this server. On each restart of the SiriDB Server the counter will reset to 0. This value is only incremented when this server is receiving points from a client. show reindex_progress: Returns the re-index status on this server. Only available when the database is re-indexing series over pools. show selected_points: Returns the selected points for this server. On each restart of the SiriDB Server the counter will reset to 0. This value includes all points which are read from the local shards and the points received from other servers to respond to a select query. The value is only incremented when this server received the select query from a client. show select_points_limit: Returns the maximum number of points which can be returned with a select query. show server: Returns this server name. The name has format host:port show startup_time: Returns the time in seconds it took to startup the SiriDB database on this server. show status: Returns the current status for this server. show sync_progress: Return synchronization status while creating a new replica server on this server. show time_precision: Returns the time precision for this database. show timezone: Returns the timezone for this database. show uptime: Returns the uptime in seconds this server is running. show uuid: Returns the UUID (unique ID) for this server. show version: Returns the SiriDB version running on this server. show who_am_i: Returns the user who is running this request.  Example # show the database name and time precision show dbname, time_precision # sample output { \u0026quot;data\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;dbname\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;mydb\u0026quot; }, { \u0026quot;name\u0026quot;: \u0026quot;time_precision\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;s\u0026quot; } ] }  "},{"uri":"https://docs.siridb.net/access/","title":"Access","tags":[],"description":"","content":"Access Everything that has to do has access rights within SiriDB.\n"},{"uri":"https://docs.siridb.net/access/access_rights/","title":"access rights","tags":[],"description":"","content":"SiriDB knows the following access rights:\n select show list count create insert drop alter grant revoke  The most obvious ones are combined into access profiles which can be used to grant or revoke multiple access rights at once.\n read: (select, show, list and count) write: read + (create and insert) modify: write + (drop and alter) full: modify + (grant, revoke)   Warning\nChanges to access rights are active immediately, so be careful when revoking access rights from users.\n "},{"uri":"https://docs.siridb.net/access/grant_access/","title":"grant access","tags":[],"description":"","content":"Grants access rights to a user. For information about access rights see access rights.\nSyntax grant \u0026lt;access\u0026gt; to user 'username'  Example # Grant drop and create to user \u0026quot;iris\u0026quot; grant drop, create to user \u0026quot;iris\u0026quot;  Output:\n{\u0026quot;success_msg\u0026quot;: \u0026quot;Successfully granted permissions to user ...\u0026quot;}  "},{"uri":"https://docs.siridb.net/access/revoke_access/","title":"revoke access","tags":[],"description":"","content":"Revokes access rights from a user. For information about access rights see access rights.\n Warning\nIf accidentally all access rights for all users are gone, you need to recover the default user. See restore access for how to recover from such a situation.\n Syntax revoke \u0026lt;access\u0026gt; from 'username'  Example # Revoke drop and create from user \u0026quot;iris\u0026quot; revoke drop, create from user \u0026quot;iris\u0026quot;  Output:\n{\u0026quot;success_msg\u0026quot;: \u0026quot;Successfully revoked permissions from ...\u0026quot;} "},{"uri":"https://docs.siridb.net/access/restore_access/","title":"restore access","tags":[],"description":"","content":"Read/use this section when accidentally all access rights to a database are gone. Follow the steps below to recover the default user. (username: iris, password: siri)\nStop all servers in the SiriDB cluster.\n# Assume you use systemd to start SiriDB... \u0026gt; sudo systemctl stop siridb-server.service   Warning\nIt\u0026rsquo;s really important to stop all servers in a SiriDB cluster to prevent database inconsistency.\n Remove the appropriate file on all servers in the SiriDB cluster.\n# Restore the default user \u0026gt; rm my_database_folder/users.dat  Start all servers in the SiriDB cluster.\n# Assume systemd is used to start SiriDB... \u0026gt; sudo systemctl start siridb-server.service  "},{"uri":"https://docs.siridb.net/related_projects/","title":"Related projects","tags":[],"description":"","content":"Related projects Projects that are related to SiriDB: Enodo.\n"},{"uri":"https://docs.siridb.net/related_projects/enodo/","title":"Enodo","tags":[],"description":"","content":"Enodo is a time series data analysis platform made for SiriDB. Combining the power of storing and querying time series data from SiriDB and the analyzing power of Enodo, we can create better understanding of the data that we collect and store. So we can learn from the past and create forecasts for the future.\nThe Enodo platform is build in modules to create scalability. The Hub will control and organize the data that we have collected and the questions we want to ask about the data. The Worker will perform the analyzing jobs and the Listener will stay on top of the latest data points. Together these components will make sure we can monitor the data in realtime, adjust our expectations for the future and watch for sudden unexpected changes in the data that we collect.\nListener The Enodo listener listens to a pipe socket with SiriDB server. The listener only keeps track of series that are registered via the hub. It sums up the added data points to each of these series and it sends periodically an update to the hub, or when a serie is monitored in realtime, it will notify the Hub immediately. The listener is separated from the Enodo hub, so that it can be placed close to the SiriDB server to gain local access to the pipe socket.\nWorker  Note : A worker uses significant CPU and thus should be placed on a machine that has low CPU usage.\n The Enodo worker executes fitting and forecasting models/algorithms. It can create different models like MA/RA/ARIMA, but also use Prophet, for analyzing series, training models with new data, flagging anomalies and calculate forecasts for a certain series. A worker can implement multiple models. This can be different per worker version. The implemented models should be communicated to the hub during the handshake.\nHub The Enodo hub communicates and guides both the listener and the worker. It tells the listener to which series it needs to pay attention to, and it tells the worker which series should be analysed. Clients can connect to the hub for receiving updates, and polling for data. Also a client can use the hub to alter the data about which series should be watched.\n"},{"uri":"https://docs.siridb.net/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://docs.siridb.net/","title":"SiriDB","tags":[],"description":"","content":"SiriDB Cesbit, a Dutch software startup, is proud to announce SiriDB to the world. This time series database is created to analyze and aggregate time series data from any source, from IoT to financial transactions to any other metric data stream. SiriDB is a fully open sourced time series database written in native C. Optimized to grow with your insert and query needs, SiriDB gives you the control over endless time series data. Time series data occurs wherever the same measurements are recorded on a regular basis. Common examples are temperature, rainfall, cpu usage, stock prices, and even sun spots.\nMain features Robust - SiriDB\u0026rsquo;s clustering mechanism provides the possibility to update and maintain the database while remaining online.\nScalable - SiriDB is scalable by using a unique pool mechanism that allows pools to be added on the fly when needed. When a pool is added; data is automatically divided evenly over all available pools providing optimal usage of all available computing resources.\nFast - SiriDB uses an unique algorithm to store its time series data without using bulky indexes. This algorithm allows the custom query language to distribute queries over all pools making data retrieval incredibly fast.\nSiriDB with a multiple nodes clustering function is available as open source under the MIT license. It gives you the opportunity to analyze data by revealing trends, patterns, cycles, anomalies and outliers that will make an organization much more responsive and efficient.\nGet it now Source code is available here at GitHub.\n"},{"uri":"https://docs.siridb.net/tags/","title":"Tags","tags":[],"description":"","content":""}]