<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Connect on SiriDB documentation</title>
    <link>https://docs.siridb.net/connect/</link>
    <description>Recent content in Connect on SiriDB documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://docs.siridb.net/connect/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTTP</title>
      <link>https://docs.siridb.net/connect/http_api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.siridb.net/connect/http_api/</guid>
      <description>Before using the HTTP API, make sure at least one node has the HTTP API port enabled. By default the API port is disabled, this can be changed by setting http_api_port in the configuration file or by setting the SIRIDB_HTTP_API_PORT environment variable.
The API has support for both JSON and qpack and can be used to perform service requests, inserts and queries.
Headers The header field Content-Type is required and needs application/json or application/qpack.</description>
    </item>
    
    <item>
      <title>Grafana SiriDB HTTP datasource</title>
      <link>https://docs.siridb.net/connect/grafana/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.siridb.net/connect/grafana/</guid>
      <description>A SiriDB data source plugin for Grafana.
Requirements SiriDB HTTP is required for this plugin. If you do not have a SiriDB HTTP instance running then it might be a good choice to install SiriDB HTTP on your Grafana server.
https://github.com/SiriDB/siridb-http
Make sure to configure SiriDB HTTP to allow Basic Authentication. Optionally you can also choose to disable authentication.
 Note: at least SiriDB server version 2.0.14 is required since this plugin makes use of the limit aggregation function.</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>https://docs.siridb.net/connect/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.siridb.net/connect/python/</guid>
      <description>The SiriDB Connector is a self-contained Python driver for communicating with SiriDB servers.
Installation From PyPI (recommended)
pip install siridb-connector From source code
python setup.py install Quick usage import asyncio import time import random from siridb.connector import SiriDBClient async def example(siri): # Start connecting to SiriDB. # .connect() returns a list of all connections referring to the supplied # hostlist. The list can contain exceptions in case a connection could not # be made.</description>
    </item>
    
    <item>
      <title>Golang</title>
      <link>https://docs.siridb.net/connect/go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.siridb.net/connect/go/</guid>
      <description>A SiriDB-Connector for the Go language
Installation Install the package to your $GOPATH with the go tool from shell:
$ go get github.com/SiriDB/go-siridb-connector Make sure Git is installed on your machine and in your system&amp;rsquo;s PATH.
Quick usage Go SiriDB Connector can be used to communicate with a single SiriDB server and a more advanced client is provided which can connect to multiple SiriDB servers so queries and inserts are balanced.</description>
    </item>
    
    <item>
      <title>Node.js</title>
      <link>https://docs.siridb.net/connect/nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.siridb.net/connect/nodejs/</guid>
      <description>Node.js add-on (C++) for SiriDB.
Installation node-gyp configure &amp;amp;&amp;amp; node-gyp build Quick usage const sdbaddon = require(&amp;#39;./build/Release/siridb&amp;#39;); var siridb = new sdbaddon.SiriDBClient( &amp;#34;iris&amp;#34;, // database user  &amp;#34;siri&amp;#34;, // password  &amp;#34;dbtest&amp;#34;, // database name  &amp;#34;localhost&amp;#34;, // server address  9000 // server port ); siridb.connect(err =&amp;gt; { // success: err is null  // error: err is a string with an error message  if (err) { console.error(`Connection error: ${err}`); } else { siridb.</description>
    </item>
    
    <item>
      <title>Java</title>
      <link>https://docs.siridb.net/connect/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.siridb.net/connect/java/</guid>
      <description>The SiriDB Connector for Java is a self-contained Java driver for communicating with SiriDB servers.
Installation First you need to install the Java-QPack library. Add this library to your project.
Now you can install the connector. You can get a copy of the compiled jar file here or clone the repository and compile the code. Add the jar file as library to your project.
Quick usage The SiriDB Connector can be used to communicate with a single SiriDB server and a more advanced client is provided which can connect to multiple SiriDB servers so queries and inserts are balanced.</description>
    </item>
    
    <item>
      <title>PHP</title>
      <link>https://docs.siridb.net/connect/php/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.siridb.net/connect/php/</guid>
      <description>An C extension for PHP. Gives access to commands in PHP code to connect to SiriDB Server and query/insert.
Installation MacOS and Linux Make sure you have libsiridb and libqpack insatalled on your system and phpize available as command.
Run:
phpize ./configure make sudo make install Don&amp;rsquo;t forget to enable the extension via the php.ini file
Quick usage When installed, you are able to using the following in your php code.</description>
    </item>
    
    <item>
      <title>R</title>
      <link>https://docs.siridb.net/connect/r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.siridb.net/connect/r/</guid>
      <description>R-connector for communicating with a SiriDB Database
Installation install.packages(&#39;siridbr&#39;) Quick usage library(siridbr) siridb &amp;lt;- SiriDB( user=&amp;quot;iris&amp;quot;, # database user password=&amp;quot;siri&amp;quot;, # password dbname=&amp;quot;dbtest&amp;quot;, # database name server=&amp;quot;localhost&amp;quot;, # server address port=9000L # server port ) siridb$connect(function(err) { # success: err is NULL # error: err is a string with an error message if (!is.null(err)) { cat(&#39;Connection error: &#39;, err) } else { siridb$close() } }) More info A more complete description of the R-connector can be found via the link below.</description>
    </item>
    
  </channel>
</rss>